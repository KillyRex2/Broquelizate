---
interface Props {
  totalPages: number;
  currentPage: number;
  queryParams: {
    category?: string;
    maxPrice?: number;
    inStock?: boolean;
    search?: string;
    piercing?: string; // Agrega esta línea
  };
}

const { totalPages, currentPage, queryParams } = Astro.props;
const path = Astro.url.pathname;

// Función para generar URL con todos los parámetros
const generateUrl = (page: number) => {
  const params = new URLSearchParams({
    ...(queryParams.category && { category: queryParams.category }),
    ...(queryParams.maxPrice && { maxPrice: queryParams.maxPrice.toString() }),
    ...(queryParams.inStock !== undefined && { inStock: queryParams.inStock.toString() }),
    ...(queryParams.search && { search: queryParams.search }),
    ...(queryParams.piercing && { piercing: queryParams.piercing }), // Agrega esta línea
    page: page.toString()
  });
  
  return `${path}?${params.toString()}`;
};

// Calcular página anterior y siguiente
const prevPage = Math.max(currentPage - 1, 1);
const nextPage = Math.min(currentPage + 1, totalPages);
---

<div class="flex justify-between items-center my-32">
  <a class="button" href={generateUrl(prevPage)}>
    Anteriores
  </a>

  <span class="text-gray-200">Página {currentPage} de {totalPages}</span>

  <a class="button" href={generateUrl(nextPage)}>
    Siguientes
  </a>
</div>

<style>
  .button {
    @apply p-2 bg-yellow-500 text-black rounded hover:bg-yellow-600 transition-colors;
    min-width: 120px;
    text-align: center;
  }
</style>