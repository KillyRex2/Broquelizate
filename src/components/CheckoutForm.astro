---
import { Formatter } from '../utils';
import { CartCookiesClient } from '@/utils/cart-cookies';
import { actions } from 'astro:actions';


// Obtener productos del carrito desde cookies
const cartItems = CartCookiesClient.getCart();
const { data: products, error } = await Astro.callAction(
  actions.loadProductsFromCart,
  cartItems
);

// AÑADIDO: Obtener la lista de clientes

if (error || !products) {
  return Astro.redirect('/');
}

// Calcular totales
const subtotal = products.reduce((sum, p) => sum + p.price * p.quantity, 0);
const tax = subtotal * 0.15;
const total = subtotal + tax;

// Generar datos de productos para el cliente
const productsData = products.map(p => ({ 
  id: p.productId, 
  name: p.name, 
  price: p.price, 
  quantity: p.quantity,
  image: p.image || ''
}));



---
<div class="bg-gradient-to-br from-gray-100 via-white to-gray-100 p-6 md:p-12 rounded-3xl shadow-2xl">
  <div class="md:max-w-5xl max-w-xl mx-auto">
     <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-12">
      <!-- Formulario de Pago -->
      <div class="lg:col-span-2 order-2 md:order-1">
        <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-3">Realizar pago</h2>
        <p class="text-sm md:text-base text-gray-600 mb-6">Completa tu transacción rápida y segura con nuestro proceso de pago premium.</p>

        <!-- Formulario de Dirección de Envío -->
      <div class="bg-white p-8 rounded-2xl shadow-xl border border-gray-200">
          <h3 class="text-xl md:text-2xl font-semibold text-gray-900 mb-5">Dirección de envío</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Calle y número</label>
              <input 
                type="text" 
                id="street-address"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500 bg-white text-gray-800"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Colonia</label>
              <input 
                type="text" 
                id="neighborhood"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500  bg-white text-gray-800"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Ciudad</label>
              <input 
                type="text" 
                id="city"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500  bg-white text-gray-800"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Estado</label>
              <input 
                type="text" 
                id="state"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500  bg-white text-gray-800"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Código Postal</label>
              <input 
                type="text" 
                id="postal-code"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500  bg-white text-gray-800"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">País</label>
              <input 
                type="text" 
                id="country"
                value="México"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500  bg-white text-gray-800"
                readonly
              />
            </div>

            <div class="col-span-full">
            <label class="block text-sm font-medium text-gray-700 mb-1">Correo Electrónico</label>
            <input 
              type="email" 
              id="email"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-purple-500 focus:ring-purple-500 bg-white text-gray-800"
              required
            />
          </div>
          </div>
        </div>
 <!-- fin formulario -->
        
        <!-- Método de Pago -->
        <div class="mt-10 bg-white p-8 rounded-2xl shadow-xl border border-gray-200">
          <h3 class="text-xl md:text-2xl font-semibold text-gray-900 mb-5">Elige tu método de pago</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <label class="flex items-center p-4 border-2 border-transparent rounded-xl cursor-pointer transition hover:border-yellow-500 hover:bg-yellow-50 peer-checked:border-yellow-500 peer-checked:bg-yellow-100">
              <input id="card" type="radio" name="payment-method" class="w-5 h-5 text-yellow-600 border-gray-300 bg-white peer" />
              <div class="ml-4 flex gap-3">
                <img src="https://readymadeui.com/images/visa.webp" alt="Visa" class="w-12" />
                <img src="https://readymadeui.com/images/american-express.webp" alt="AmEx" class="w-12" />
                <img src="https://readymadeui.com/images/master.webp" alt="Mastercard" class="w-12" />
              </div>
            </label>
            <label class="flex items-center p-4 border-2 border-transparent rounded-xl cursor-pointer transition hover:border-yellow-500 hover:bg-yellow-50 peer-checked:border-yellow-500 peer-checked:bg-yellow-100">
              <input id="paypal" type="radio" name="payment-method" class="w-5 h-5 text-yellow-600 border-gray-300 bg-white peer" />
              <img src="https://readymadeui.com/images/paypal.webp" alt="PayPal" class="ml-4 w-24" />
            </label>
          </div>

          <!-- Formulario Tarjeta (Stripe) -->
          <div id="card-form" class="mt-8 hidden">
            <form id="payment-form" class="grid gap-6">
              <input
                type="text"
                placeholder="Nombre del titular"
                class="px-5 py-4 bg-gray-50 border border-gray-300 rounded-lg focus:border-yellow-500 focus:ring-yellow-200 text-gray-800"
                required
              />
              <div id="card-element" class="StripeElement p-4 bg-gray-50 border border-gray-300 rounded-lg"></div>
              <div id="card-errors" class="text-red-600 text-sm mt-2" role="alert"></div>
              <button
                type="button"
                id="submit-card-payment"
                class="mt-6 w-full py-4 font-semibold bg-yellow-600 text-white uppercase rounded-lg hover:bg-yellow-700 transition"
              >
                Pagar Ahora
              </button>
            </form>
          </div>

          <!-- Contenedor PayPal -->
          <div id="paypal-container" class="mt-8 hidden">
            <div id="paypal-button-container"></div>
          </div>
        </div>
      </div>

      <!-- Resumen de Compra -->
      <aside class="order-1 md:order-2 bg-white p-8 rounded-2xl shadow-xl border border-gray-200 sticky top-8">
        <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-6">Resumen de tu compra</h2>
        <ul class="space-y-4 text-gray-700">
          {products.map(p => (
            <li class="flex justify-between">
              <span class="font-medium">{p.name} x{p.quantity}</span>
              <span class="font-semibold">{Formatter.currency(p.price * p.quantity)}</span>
            </li>
          ))}
          <li class="flex justify-between">
            <span class="text-gray-600">Impuestos (15%)</span>
            <span class="font-semibold">{Formatter.currency(tax)}</span>
          </li>
          <li class="border-t pt-4 flex justify-between text-lg font-semibold text-gray-900">
            <span>Total</span>
            <span>{Formatter.currency(total)}</span>
          </li>
        </ul>
      </aside>
    </div>
  </div>
</div>


<style>
  .StripeElement {
    box-sizing: border-box;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    background-color: #fafafa;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    transition: box-shadow 0.2s ease;
  }
  .StripeElement--focus { box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
  .StripeElement--invalid { border-color: #e53e3e; }
</style>


<script>
  // Importar SweetAlert2 y otras dependencias
  import { CartCookiesClient } from '@/utils/cart-cookies';
  import { loadScript } from '@paypal/paypal-js';
  import { loadStripe } from '@stripe/stripe-js';
  import type { Stripe, StripeCardElement, StripeElements } from '@stripe/stripe-js';
  import Swal from 'sweetalert2';
  import { navigate } from 'astro:transitions/client';
  import { generateAndPrintTicket } from '@/services/ticketGenerator';
  import { actions } from 'astro:actions';

  // Definir Formatter para el cliente
  const Formatter = {
    currency: (value: number) => {
      return new Intl.NumberFormat('es-MX', {
        style: 'currency',
        currency: 'MXN',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      }).format(value);
    }
  };

type Product = {
      name: string;
      quantity: number;
      price: number;
    };



let stripe: Stripe | null = null;
let cardElement: StripeCardElement | null = null;
let isPaypalSdkLoaded = false;


// Función para inicializar Stripe y los elementos de pago
async function initializeStripe() {
    const cardElementContainer = document.getElementById('card-element');
    if (!cardElementContainer) return;

    // Si el elemento ya está montado en este contenedor, no hacer nada.
    if (cardElement && cardElementContainer.childElementCount > 0) return;

    try {
      cardElementContainer.innerHTML = '<div class="stripe-loader">Cargando pasarela de pago...</div>';
      
      // Cargar Stripe solo una vez.
      if (!stripe) {
        if (!import.meta.env.PUBLIC_STRIPE_PUBLIC_KEY) {
          throw new Error('La clave pública de Stripe no está configurada.');
        }
        const stripeInstance = await loadStripe(import.meta.env.PUBLIC_STRIPE_PUBLIC_KEY);
        if (!stripeInstance) throw new Error('No se pudo cargar Stripe');
        stripe = stripeInstance;
      }
      
      const elements = stripe.elements();
      cardElement = elements.create('card', {
        style: {
          base: {
            color: '#32325d',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSize: '16px',
            '::placeholder': { color: '#aab7c4' }
          },
          invalid: { color: '#fa755a', iconColor: '#fa755a' }
        },
        hidePostalCode: true 
      });

      // Limpiar el contenedor y montar el nuevo elemento.
      cardElementContainer.innerHTML = '';
      cardElement.mount(cardElementContainer);

      cardElement.on('change', (event) => {
        const displayError = document.getElementById('card-errors');
        if (displayError) displayError.textContent = event.error ? event.error.message : '';
      });

    } catch (error) {
      console.error('Error inicializando Stripe:', error);
      cardElementContainer.innerHTML = `<div class="stripe-error">Error al cargar la pasarela de pago </div>`;
    }
  }


  // Función para obtener los datos de forma segura
function getCheckoutData(): {
  productsData: CartProduct[];
  taxValue: number;
  totalValue: number;
} | null {
  const productsDataElement = document.getElementById('products-data');
  const productsImagesElement = document.getElementById('products-images');
  const taxDataElement = document.getElementById('tax-data');
  const totalDataElement = document.getElementById('total-data');
  
  if (!productsDataElement || !taxDataElement || !totalDataElement || !productsImagesElement) {
    console.error('Elementos de datos no encontrados');
    return null;
  }
  
  const rawProductsData = JSON.parse(productsDataElement.textContent || '[]');
  const productsImages = JSON.parse(productsImagesElement.textContent || '[]');
  const taxValue = parseFloat(taxDataElement.textContent || '0');
  const totalValue = parseFloat(totalDataElement.textContent || '0');

  // Asegurar estructura correcta de los productos con tipo CartProduct
  const productsData: CartProduct[] = rawProductsData.map((p: any, index: number) => ({
    id: p.id || p.productId || "",
    name: p.name || "",
    price: p.price || 0,
    quantity: p.quantity || 1,
    image: productsImages[index] || ''
  }));
  
  return {
    productsData,
    taxValue,
    totalValue
  };
}

  // Función para actualizar la visibilidad de los métodos de pago
function updatePaymentVisibility() {
    const selectedMethod = document.querySelector('input[name="payment-method"]:checked') as HTMLInputElement;
    if (!selectedMethod) return;

    const cardForm = document.getElementById('card-form');
    const cashMessage = document.getElementById('cash-message');
    const paypalContainer = document.getElementById('paypal-container'); // Div que contiene los botones

    // Ocultar todos los contenedores primero
    if (cardForm) cardForm.classList.add('hidden');
    if (cashMessage) cashMessage.classList.add('hidden');
    if (paypalContainer) paypalContainer.classList.add('hidden');

    // Mostrar el contenedor correcto
    if (selectedMethod.id === 'card') {
      if (cardForm) cardForm.classList.remove('hidden');
      initializeStripe(); // Inicializar Stripe si se selecciona tarjeta
    } else if (selectedMethod.id === 'paypal') {
      if (paypalContainer) 
      paypalContainer.classList.remove('hidden');
      initializePayPal(); // Inicializar PayPal si se selecciona
    }
  }



// Función handleCheckout actualizada
async function handleCheckout(e: Event): Promise<void> {
  e.preventDefault();
  
  // Recopilar información del formulario
  const email = (document.getElementById('email') as HTMLInputElement)?.value;
  const streetAddress = (document.getElementById('street-address') as HTMLInputElement)?.value;
  const neighborhood = (document.getElementById('neighborhood') as HTMLInputElement)?.value;
  const city = (document.getElementById('city') as HTMLInputElement)?.value;
  const state = (document.getElementById('state') as HTMLInputElement)?.value;
  const postalCode = (document.getElementById('postal-code') as HTMLInputElement)?.value;
  const country = (document.getElementById('country') as HTMLInputElement)?.value || 'MX';
  
  // Validar campos obligatorios
  if (!email || !streetAddress || !city || !state || !postalCode) {
    await Swal.fire({
      title: 'Campos incompletos',
      text: 'Por favor, completa todos los campos requeridos: Email, Calle, Ciudad, Estado y Código Postal.',
      icon: 'error',
      confirmButtonText: 'Aceptar',
      customClass: {
        popup: 'rounded-xl',
        confirmButton: 'px-4 py-2 rounded-lg'
      }
    });
    return;
  }

  // Construir objeto de dirección
  const shippingAddress = {
    line1: streetAddress,
    line2: neighborhood,
    city: city,
    state: state,
    postal_code: postalCode,
    country: country,
  };

  // Obtener datos del carrito
  const productsDataElement = document.getElementById('products-data');
  const productsImagesElement = document.getElementById('products-images');
  const taxDataElement = document.getElementById('tax-data');
  const totalDataElement = document.getElementById('total-data');
  
  if (!productsDataElement || !taxDataElement || !totalDataElement || !productsImagesElement) {
    console.error('Elementos de datos no encontrados');
    await Swal.fire({
      title: 'Error',
      text: 'No se encontraron los datos del carrito',
      icon: 'error',
      confirmButtonText: 'Aceptar'
    });
    return;
  }
  
  const productsData = JSON.parse(productsDataElement.textContent || '[]');
  const productsImages = JSON.parse(productsImagesElement.textContent || '[]');
  const taxValue = parseFloat(taxDataElement.textContent || '0');
  const totalValue = parseFloat(totalDataElement.textContent || '0');

  // Vincular imagenes con los productos
  const productsWithImages = productsData.map((product: any, index: number) => ({
    ...product,
    image: productsImages[index] || null
  }));
  
  // Mostrar loader - guardamos la referencia
  let swalInstance: any = null;
  
  try {
    swalInstance = Swal.fire({
      title: 'Procesando pedido...',
      html: 'Estamos preparando tu compra',
      allowOutsideClick: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      },
      customClass: {
        popup: 'rounded-xl'
      }
    });

    // Paso 1: Actualizar stock
    await updateProductStock();
    
    // Paso 2: Crear orden
    const order = await createOrder('card');
    
    // Paso 3: Crear sesión de pago con Stripe
    const response = await fetch('/api/create-checkout-session', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        products: productsWithImages,
        shippingAddress: shippingAddress,
        customerEmail: email,
        successUrl: `${window.location.origin}/order-success?order_id=${order.id}`,
        cancelUrl: window.location.href,
      })
    });

    if (!response.ok) {
      const errorResponse = await response.json();
      throw new Error(errorResponse.error || `Error HTTP: ${response.status}`);
    }

    const result = await response.json();
    if (!result.sessionId) throw new Error('No se recibió ID de sesión de Stripe');

    // Limpiar carrito ANTES de redirigir
    CartCookiesClient.clearCart();

    // Redirigir a Stripe Checkout
    const stripe = await loadStripe(import.meta.env.PUBLIC_STRIPE_PUBLIC_KEY);
    if (!stripe) throw new Error('No se pudo cargar Stripe');

    const { error } = await stripe.redirectToCheckout({
      sessionId: result.sessionId,
    });

    if (error) throw error;

  } catch (error) {
    console.error('Error en el checkout:', error);
    
    // Cerrar loader si está activo
    if (swalInstance) {
      swalInstance.then((result: any) => {
        if (result.isVisible) {
          Swal.close();
        }
      });
    }
    
    let errorMessage = 'Ocurrió un error al procesar tu pago';
    if (error instanceof Error) {
      errorMessage = error.message || errorMessage;
    }
    
    await Swal.fire({
      title: 'Error',
      text: errorMessage,
      icon: 'error',
      confirmButtonText: 'Intentar de nuevo',
      customClass: {
        popup: 'rounded-xl',
        confirmButton: 'px-4 py-2 rounded-lg'
      }
    });
  } finally {
    // Cerrar loader si sigue abierto
    if (swalInstance) {
      swalInstance.then((result: any) => {
        if (result.isVisible) {
          Swal.close();
        }
      });
    }
  }
}

// Función handleCashPayment actualizada
async function handleCashPayment() {
  try {
    // Mostrar loader
    const swalInstance = Swal.fire({
      title: 'Procesando pedido...',
      html: 'Creando tu orden de compra',
      allowOutsideClick: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      },
      customClass: {
        popup: 'rounded-xl'
      }
    });

    // Paso 1: Actualizar stock
    await updateProductStock();
    
    // Paso 2: Crear orden
    const order = await createOrder('cash');

    // Información de la tienda
    const storeInfo = {
      name: "Broquelizate",
      address: "esquina con, Calle Escobedo, Bravo 222, Colonia Centro, 35000 Gómez Palacio, Dgo.",
      phone: "+528714617696",
      rfc: "XAXX010101000"
    };
    const discount = 0;
    const amount = 0;
    // Generar el ticket
    const data = getCheckoutData();
    if (!data) throw new Error('Datos de compra no disponibles');
    
   
    
    // Cerrar loader de procesamiento
    Swal.close();

    // Mostrar mensaje de éxito con opciones
    Swal.fire({
      title: 'Orden completada',
      html: `
        <div class="text-center">
          <svg class="w-16 h-16 text-green-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <p class="mb-4">Orden #${order.orderNumber} registrada</p>
          <p class="text-sm text-gray-600 mb-6">Pago en efectivo confirmado. Puedes recoger tu pedido en nuestro local.</p>
          <button id="print-receipt" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors">
            Imprimir recibo
          </button>
          <button id="view-order" class="mt-3 bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-md transition-colors">
            Ver detalles
          </button>
        </div>
      `,
      showConfirmButton: false,
      customClass: {
        popup: 'rounded-xl'
      }
    });
    const selectedMethod = document.querySelector('input[name="payment-method"]:checked') as HTMLInputElement;
    
    // Agregar eventos a los botones
    setTimeout(() => {
      const printButton = document.getElementById('print-receipt');
      const viewButton = document.getElementById('view-order');
      
      if (printButton) {
        printButton.addEventListener('click', () => {
           generateAndPrintTicket(data.productsData,data.totalValue, order.orderNumber, selectedMethod.id, storeInfo);
        });
      }
      
      if (viewButton) {
        viewButton.addEventListener('click', () => {
          Swal.close();
          navigate(`/order-success?order_id=${order.id}`);
        });
      }
    }, 100);

    // Limpiar carrito después de éxito
    CartCookiesClient.clearCart();

  } catch (error) {
    console.error('Error en el pago en efectivo:', error);
    
    // Cerrar loader si está activo
    if (Swal.isVisible()) Swal.close();
    
    let errorMessage = 'Ocurrió un error al procesar tu pedido';
    if (error instanceof Error) {
      errorMessage = error.message || errorMessage;
    }
    
    await Swal.fire({
      title: 'Error',
      text: errorMessage,
      icon: 'error',
      confirmButtonText: 'Entendido',
      customClass: {
        popup: 'rounded-xl',
        confirmButton: 'px-4 py-2 rounded-lg'
      }
    });
  }
}

  
// Definir una interfaz para el producto
interface CartProduct {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string;
}

// Nueva función para crear la orden con tipos definidos
async function createOrder(paymentMethod: string) {
  // Recopilar información del formulario
  const email = (document.getElementById('email') as HTMLInputElement)?.value;
  const streetAddress = (document.getElementById('street-address') as HTMLInputElement)?.value;
  const neighborhood = (document.getElementById('neighborhood') as HTMLInputElement)?.value;
  const city = (document.getElementById('city') as HTMLInputElement)?.value;
  const state = (document.getElementById('state') as HTMLInputElement)?.value;
  const postalCode = (document.getElementById('postal-code') as HTMLInputElement)?.value;
  const country = (document.getElementById('country') as HTMLInputElement)?.value || 'México';

  
  // Obtener cliente seleccionado
  const customerSelect = document.getElementById('customer-select') as HTMLSelectElement | null;
  const clientId = customerSelect?.value ? parseInt(customerSelect.value) : null;
  
  const shippingAddress = {
    streetAddress,
    neighborhood,
    city,
    state,
    postalCode,
    country
  };

  const data = getCheckoutData();
  if (!data) throw new Error('Datos de compra no disponibles');
  
  // Validar IDs de productos con tipo definido
  const invalidProducts = data.productsData.filter((p: CartProduct) => !p.id);
  if (invalidProducts.length > 0) {
    console.error("Productos sin ID:", invalidProducts);
    throw new Error(`${invalidProducts.length} productos no tienen ID válido`);
  }

  // Preparar datos para la API con tipo definido
  const orderData = {
    customerEmail: email,
    shippingAddress: shippingAddress,
    products: data.productsData.map((p: CartProduct) => ({
      id: p.id,
      name: p.name,
      price: p.price,
      quantity: p.quantity
    })),
    subtotal: data.totalValue - data.taxValue,
    tax: data.taxValue,
    total: data.totalValue,
    paymentMethod: paymentMethod,
    clientId: clientId
  };

  try {
    // Llamar al endpoint para crear la orden
    const response = await fetch('/api/create-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orderData)
    });

    if (!response.ok) {
      const errorResponse = await response.json();
      throw new Error(errorResponse.error || `Error HTTP: ${response.status}`);
    }

    return await response.json();
  } catch (error: any) {
    console.error('Error creating order:', error);
    
    // Mejorar mensaje de error
    let errorMessage = 'Error al crear la orden';
    if (error instanceof Error) {
      errorMessage += `: ${error.message}`;
    }
    
    throw new Error(errorMessage);
  }
}
  // [NUEVA FUNCIÓN AUXILIAR] - Para obtener el total y validar el formulario antes de pagar con PayPal
function validateAndGetDataForPaypal() {
  // Obtener todos los campos requeridos
  const email = (document.getElementById('email') as HTMLInputElement)?.value.trim();
  const streetAddress = (document.getElementById('street-address') as HTMLInputElement)?.value.trim();
  const neighborhood = (document.getElementById('neighborhood') as HTMLInputElement)?.value.trim();
  const city = (document.getElementById('city') as HTMLInputElement)?.value.trim();
  const state = (document.getElementById('state') as HTMLInputElement)?.value.trim();
  const postalCode = (document.getElementById('postal-code') as HTMLInputElement)?.value.trim();
  
  // Crear lista de campos faltantes
  const missingFields = [];
  if (!email) missingFields.push('Correo Electrónico');
  if (!streetAddress) missingFields.push('Calle y número');
  if (!neighborhood) missingFields.push('Colonia');
  if (!city) missingFields.push('Ciudad');
  if (!state) missingFields.push('Estado');
  if (!postalCode) missingFields.push('Código Postal');
  
  // Verificar si hay campos faltantes
  if (missingFields.length > 0) {
    Swal.fire({
      title: 'Campos incompletos',
      html: `Por favor completa los siguientes campos:<br><br>${missingFields.join('<br>')}`,
      icon: 'warning',
      confirmButtonText: 'Entendido',
      customClass: {
        popup: 'rounded-xl',
        confirmButton: 'px-4 py-2 rounded-lg'
      }
    }).then(() => {
      // Enfocar el primer campo faltante
      if (!streetAddress) {
        document.getElementById('street-address')?.focus();
      } else if (!neighborhood) {
        document.getElementById('neighborhood')?.focus();
      } else if (!city) {
        document.getElementById('city')?.focus();
      } else if (!state) {
        document.getElementById('state')?.focus();
      } else if (!postalCode) {
        document.getElementById('postal-code')?.focus();
      } else if (!email) {
        document.getElementById('email')?.focus();
      }
    });
    
    return null;
  }

  const data = getCheckoutData();
  if (!data || !data.totalValue) {
    Swal.fire({
      title: 'Error en el carrito',
      text: 'No se pudo obtener el total del carrito.',
      icon: 'error',
      confirmButtonText: 'Aceptar'
    });
    return null;
  }

  return {
    total: data.totalValue
  };
}


// Declaración global final


async function initializePayPal() {
  const container = document.getElementById('paypal-button-container');
  if (!container) return;
  
  container.innerHTML = '<div class="text-center py-4">Cargando PayPal...</div>';
  
  try {
    const paypal = await loadScript({
      clientId: import.meta.env.PUBLIC_PAYPAL_CLIENT_ID || "AcBeVZggGRidpLZa0RrTje-kNfh0Q6vhNY1H4qTVjFxaEHrF-ltd1D3erIxPNbjVrtUXjHM-5qsa8-3y",
      currency: "MXN",
      intent: "capture",
      commit: true,
      vault: false,
      components: "buttons",
      disableFunding: "venmo,giropay,sofort,sepa",
      enableFunding: "",
      dataNamespace: "paypal_sdk",
      dataPartnerAttributionId: "broquelizate_SP",
      locale: "es_MX"
    });
    
    if (paypal && paypal.Buttons) {
      renderPayPalButtons(paypal);
    } else {
      container.innerHTML = '<div class="text-red-500">Componente PayPal no disponible</div>';
    }
  } catch (error) {
    console.error('Error inicializando PayPal:', error);
    container.innerHTML = '<div class="text-red-500">Error al cargar PayPal</div>';
  }
}
function setupFormValidation() {
  const requiredFields = [
    'email', 'street-address', 'neighborhood', 
    'city', 'state', 'postal-code'
  ];
  
  requiredFields.forEach(id => {
    const field = document.getElementById(id);
    if (field) {
      field.addEventListener('blur', () => {
        if (!(field as HTMLInputElement).value.trim()) {
          field.classList.add('border-red-500');
        } else {
          field.classList.remove('border-red-500');
        }
      });
    }
  });
}

function renderPayPalButtons(paypal: any) {
  paypal.Buttons({
    createOrder: async () => {
      const checkoutData = validateAndGetDataForPaypal();
      if (!checkoutData) return Promise.reject('Validación fallida');
      
      try {
        const result = await actions.createPaypalOrder({ total: checkoutData.total });
        if (result.error) throw new Error(result.error.message);
        return result.data.orderId;
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Error desconocido';
        Swal.fire('Error', message, 'error');
        return Promise.reject(err);
      }
    },

    onApprove: async (data: any) => {
      Swal.fire({ 
        title: 'Procesando pago...', 
        text: 'Por favor, no cierres esta ventana.',
        allowOutsideClick: false, 
        didOpen: () => Swal.showLoading() 
      });

      try {
        const result = await actions.capturePaypalOrder({ orderId: data.orderID });
        if (result.error) throw new Error(result.error.message);
        
        await updateProductStock();
        const internalOrder = await createOrder('paypal');
        CartCookiesClient.clearCart();
        Swal.close();
        navigate(`/order-success?order_id=${internalOrder.id}`);
      } catch (err) {
        Swal.close();
        const message = err instanceof Error ? err.message : 'Error desconocido';
        Swal.fire('Error', `Pago fallido: ${message}`, 'error');
      }
    },

    onError: (err: any) => {
      console.error('Error de PayPal:', err);
      Swal.fire('Error', 'Ocurrió un error con PayPal. Por favor, intenta de nuevo.', 'error');
    },

    onCancel: (data: any) => {
      console.log('Pago cancelado por el usuario. OrderID:', data.orderID);
    }

  }).render('#paypal-button-container');
}


 // Función para actualizar el stock (corregida)
async function updateProductStock() {
  const productsDataElement = document.getElementById('products-data');
  if (!productsDataElement) {
    throw new Error('Elemento de datos de productos no encontrado');
  }
  
  // Parsear los datos de productos
  const rawProductsData = JSON.parse(productsDataElement.textContent || '[]');
  
  // Crear datos para actualizar stock usando id directamente
  const stockUpdateData = rawProductsData.map((p: any) => ({
    id: p.id, // Usar id directamente
    quantity: p.quantity
  }));
  
  try {
    const response = await fetch('/api/update-stock-online', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ products: stockUpdateData })
    });

    if (!response.ok) {
      const errorResponse = await response.json();
      throw new Error(errorResponse.error || 'Error al actualizar el stock');
    }
  } catch (error) {
    console.error('Error updating stock:', error);
    throw error;
  }
}



  // Inicialización cuando la página está lista
  // Inicialización cuando la página está lista
  document.addEventListener('astro:page-load', async () => {
    setupFormValidation();

    const paymentRadios = document.querySelectorAll('input[name="payment-method"]');
    paymentRadios.forEach(radio => {
      radio.addEventListener('change', updatePaymentVisibility);
    });
    
    // Configurar formulario de tarjeta
    const paymentForm = document.getElementById('submit-card-payment');
     initializeStripe();
    if (paymentForm) {
      paymentForm.addEventListener('click', handleCheckout);
    }
    
    // Configurar botón de pago en efectivo
    const payCashBtn = document.getElementById('pay-cash');
    if (payCashBtn) {
      payCashBtn.addEventListener('click', handleCashPayment);
    }
    
    // Establecer estado inicial
    updatePaymentVisibility();
    
    // CORRECCIÓN: Mejorar UX de los métodos de pago (versión corregida)
    const paymentOptions = document.querySelectorAll('.flex.items-center');
    paymentOptions.forEach(option => {
      option.addEventListener('click', function(this: HTMLElement) {
        // Remover selección de todas las opciones
        paymentOptions.forEach(opt => {
          const parent = opt.closest('.flex.items-center');
          if (parent) {
            parent.classList.remove('selected');
          }
        });
        
        // Agregar selección a la opción actual
        const currentParent = this.closest('.flex.items-center');
        if (currentParent) {
          currentParent.classList.add('selected');
        }
      });
    });
  });  
</script>

<!-- Elementos ocultos con datos -->
<!-- Por esto (agrega id si falta) -->
<div id="products-data" style="display: none;">
  {JSON.stringify(productsData.map(p => ({
    id: p.id || p.id || "", // Asegura tener id
    name: p.name,
    price: p.price,
    quantity: p.quantity,
    image: p.image || ''
  })))}
</div>
<div id="products-images" style="display: none;">
  {JSON.stringify(products.map(p => p.image || ''))}
</div>
<div id="tax-data" style="display: none;">{tax}</div>
<div id="total-data" style="display: none;">{total}</div>