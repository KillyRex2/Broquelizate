---
import { Formatter } from '../utils';
import type { CartItem } from '@/interfaces';
import { CartCookiesClient } from '@/utils/cart-cookies';
import { actions } from 'astro:actions';
import { navigate } from 'astro:transitions/client';
const { isLoggedIn, isAdmin } = Astro.locals;

// Obtener productos del carrito desde cookies
const cartItems = CartCookiesClient.getCart();
const { data: products, error } = await Astro.callAction(
  actions.loadProductsFromCart,
  cartItems
);

if (error || !products) {
  return Astro.redirect('/');
}

// Calcular totales
const subtotal = products.reduce((sum, p) => sum + p.price * p.quantity, 0);
const tax = subtotal * 0.15;
const total = subtotal + tax;
---

<div class="bg-gray-200 p-4 rounded-xl shadow-md">
  <div class="md:max-w-5xl max-w-xl mx-auto">
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      <!-- Formulario de Pago -->
      <div class="lg:col-span-2 max-md:order-1">
        <h2 class="text-3xl font-semibold text-slate-900">Realizar pago</h2>
        <p class="text-slate-500 text-sm mt-4">Completa tu transacción rápida y segura con nuestro sencillo proceso de pago.</p>
        
        <div class="mt-8 max-w-lg">
          <h3 class="text-lg font-semibold text-slate-900">Elige tu método de pago</h3>
          
          <div class="flex flex-wrap gap-4 justify-between mt-6">
            {
              isAdmin && (
                <!-- Opción de Efectivo -->
                <div class="flex items-center">
                  <input type="radio" class="w-5 h-5 cursor-pointer" id="cash" name="payment-method" />
                  <label for="cash" class="ml-4 flex gap-2 cursor-pointer items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <span class="text-lg text-gray-800">Efectivo</span>
                  </label>
                </div>
              )
            }
            <!-- Opciones de tarjeta -->
            <div class="flex items-center">
              <input type="radio" class="w-5 h-5 cursor-pointer" id="card" name="payment-method" checked={!isAdmin} />
              <label for="card" class="ml-4 flex gap-2 cursor-pointer">
                <img src="https://readymadeui.com/images/visa.webp" class="w-12" alt="Visa" />
                <img src="https://readymadeui.com/images/american-express.webp" class="w-12" alt="American Express" />
                <img src="https://readymadeui.com/images/master.webp" class="w-12" alt="Mastercard" />
              </label>
            </div>
            
            <!-- Opción de PayPal -->
            <div class="flex items-center">
              <input type="radio" class="w-5 h-5 cursor-pointer" id="paypal" name="payment-method" />
              <label for="paypal" class="ml-4 flex gap-2 cursor-pointer">
                <img src="https://readymadeui.com/images/paypal.webp" class="w-20" alt="PayPal" />
              </label>
            </div>
          </div>

          <!-- Formulario de pago con tarjeta -->
          <div id="card-form" class={!isAdmin ? "mt-12" : "hidden mt-12"}>
            <form id="payment-form">
              <div class="grid gap-4">
                <div>
                  <input 
                    type="text" 
                    placeholder="Nombre del titular" 
                    class="px-4 py-3.5 bg-gray-100 text-slate-900 w-full text-sm border border-gray-200 rounded-md focus:border-purple-500 focus:bg-transparent outline-0"
                    required
                  />
                </div>
                
                <div class="flex bg-gray-100 border border-gray-200 rounded-md focus-within:border-purple-500 focus-within:bg-transparent overflow-hidden">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-6 ml-3" viewBox="0 0 32 20">
                    <circle cx="10" cy="10" r="10" fill="#f93232" />
                    <path fill="#fed049"
                      d="M22 0c-2.246 0-4.312.75-5.98 2H16v.014c-.396.298-.76.634-1.107.986h2.214c.308.313.592.648.855 1H14.03a9.932 9.932 0 0 0-.667 1h5.264c.188.324.365.654.518 1h-6.291a9.833 9.833 0 0 0-.377 1h7.044c.104.326.186.661.258 1h-7.563c-.067.328-.123.66-.157 1h7.881c.039.328.06.661.06 1h-8c0 .339.027.67.06 1h7.882c-.038.339-.093.672-.162 1h-7.563c.069.341.158.673.261 1h7.044a9.833 9.833 0 0 1-.377 1h-6.291c.151.344.321.678.509 1h5.264a9.783 9.783 0 0 1-.669 1H14.03c.266.352.553.687.862 1h2.215a10.05 10.05 0 0 1-1.107.986A9.937 9.937 0 0 0 22 20c5.523 0 10-4.478 10-10S27.523 0 22 0z"
                    />
                  </svg>
                  <input 
                    type="text" 
                    placeholder="Número de tarjeta" 
                    class="px-4 py-3.5 text-slate-900 w-full text-sm outline-0 bg-transparent"
                    required
                    maxlength="19"
                  />
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <input 
                      type="text" 
                      placeholder="MM/AA" 
                      class="px-4 py-3.5 bg-gray-100 text-slate-900 w-full text-sm border border-gray-200 rounded-md focus:border-purple-500 focus:bg-transparent outline-0"
                      required
                      maxlength="5"
                    />
                  </div>
                  <div>
                    <input 
                      type="number" 
                      placeholder="CVV" 
                      class="px-4 py-3.5 bg-gray-100 text-slate-900 w-full text-sm border border-gray-200 rounded-md focus:border-purple-500 focus:bg-transparent outline-0"
                      required
                      maxlength="4"
                    />
                  </div>
                </div>
              </div>
              
              <button 
                type="submit" 
                class="mt-8 w-40 py-3 text-[15px] font-medium bg-purple-500 text-white rounded-md hover:bg-purple-600 tracking-wide cursor-pointer transition-colors"
              >
                Pagar
              </button>
            </form>
          </div>
          
          {
            isAdmin && (
              <!-- Mensaje para pago en efectivo -->
              <div id="cash-message" class="hidden mt-8 p-4 bg-green-50 border border-green-200 rounded-md">
                <div class="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-600 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <div>
                    <h3 class="font-medium text-green-800">Pago en efectivo seleccionado</h3>
                    <p class="text-green-700 text-sm mt-1">
                      Al finalizar tu compra, recibirás instrucciones para realizar el pago en efectivo al recibir tu pedido.
                    </p>
                    <button 
                      id="pay-cash" 
                      class="mt-4 w-full py-3 text-[15px] font-medium bg-green-500 text-white rounded-md hover:bg-green-600 tracking-wide cursor-pointer transition-colors"
                    >
                      Finalizar Compra
                    </button>
                  </div>
                </div>
              </div>
            )
          }
        </div>
      </div>

      <!-- Resumen de Compra -->
      <div class="bg-gray-100 p-6 rounded-md h-fit sticky top-4">
        <h2 class="text-2xl font-semibold text-slate-900">{Formatter.currency(total)}</h2>
        
        <ul class="text-slate-500 font-medium mt-8 space-y-4">
          {products.map(product => (
            <li class="flex flex-wrap gap-4 text-sm">
              {product.name} (x{product.quantity})
              <span class="ml-auto font-semibold text-slate-900">
                {Formatter.currency(product.price * product.quantity)}
              </span>
            </li>
          ))}
          
          <li class="flex flex-wrap gap-4 text-sm">
            Impuestos (15%)
            <span class="ml-auto font-semibold text-slate-900">
              {Formatter.currency(tax)}
            </span>
          </li>
          
          <li class="flex flex-wrap gap-4 text-[15px] font-semibold text-slate-900 border-t border-gray-300 pt-4">
            Total
            <span class="ml-auto">{Formatter.currency(total)}</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>

<style>
  /* Estilos adicionales para mejorar la experiencia */
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  input[type="number"] {
    -moz-appearance: textfield;
  }
  
  .sticky {
    position: sticky;
  }
  
  @media (max-width: 768px) {
    .max-md\:order-1 {
      order: 1;
    }
  }
  
  /* Mejoras visuales */
  .payment-option {
    flex: 1;
    min-width: 150px;
    border: 2px solid transparent;
    border-radius: 8px;
    padding: 12px;
    transition: all 0.3s ease;
  }
  
  .payment-option:hover {
    border-color: #a855f7;
    background-color: rgba(168, 85, 247, 0.05);
  }
  
  .payment-option.selected {
    border-color: #a855f7;
    background-color: rgba(168, 85, 247, 0.1);
  }
</style>

<script>
  // Importar SweetAlert2 y otras dependencias
  import Swal from 'sweetalert2';
  import { navigate } from 'astro:transitions/client';
  import { generateTicket, printTicket } from '@/services/ticketGenerator';
  import { CartCookiesClient as Cookies } from '../utils/cart-cookies';

  // Definir Formatter para el cliente
  const Formatter = {
    currency: (value: number) => {
      return new Intl.NumberFormat('es-MX', {
        style: 'currency',
        currency: 'MXN',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      }).format(value);
    }
  };
    type Product = {
      name: string;
      quantity: number;
      price: number;
    };
  
  // Función para renderizar los productos en el resumen
  function renderProducts(products: Product[]) {
    return products.map(p => `
      <li class="flex justify-between text-sm">
        <span>${p.name} (x${p.quantity})</span>
        <span>${Formatter.currency(p.price * p.quantity)}</span>
      </li>
    `).join('');
  }

  // Función para obtener los datos de forma segura
  function getCheckoutData() {
    const productsDataElement = document.getElementById('products-data');
    const taxDataElement = document.getElementById('tax-data');
    const totalDataElement = document.getElementById('total-data');
    
    if (!productsDataElement || !taxDataElement || !totalDataElement) {
      console.error('Elementos de datos no encontrados');
      return null;
    }
    
    return {
      productsData: JSON.parse(productsDataElement.textContent || '[]'),
      taxValue: parseFloat(taxDataElement.textContent || '0'),
      totalValue: parseFloat(totalDataElement.textContent || '0')
    };
  }

  // Función para actualizar la visibilidad de los métodos de pago
  function updatePaymentVisibility() {
    const selectedMethod = document.querySelector('input[name="payment-method"]:checked');
    if (!selectedMethod) return;
    
    const cardForm = document.getElementById('card-form');
    const cashMessage = document.getElementById('cash-message');
    
    if (selectedMethod.id === 'card') {
      if (cardForm) cardForm.classList.remove('hidden');
      if (cashMessage) cashMessage.classList.add('hidden');
    } 
    else if (selectedMethod.id === 'cash') {
      if (cardForm) cardForm.classList.add('hidden');
      if (cashMessage) cashMessage.classList.remove('hidden');
    } 
    else {
      if (cardForm) cardForm.classList.add('hidden');
      if (cashMessage) cashMessage.classList.add('hidden');
    }
  }

  // Función para manejar el pago con tarjeta
  function handleCardPayment(e: Event) {
    e.preventDefault();
    console.log('Procesando pago con tarjeta...');
    
    // Simular procesamiento de pago
    setTimeout(() => {
      navigate('/order-success');
    }, 1000);
  }

  // Función para manejar el pago en efectivo
  async function handleCashPayment() {
    const data = getCheckoutData();
    if (!data) return;
    
    const { productsData, taxValue, totalValue } = data;
    
    const result = await Swal.fire({
      title: 'Confirmar compra',
      html: `
        <div class="text-left">
          <p class="mb-4">¿Estás seguro de completar la compra con pago en efectivo?</p>
          <div class="bg-gray-100 p-3 rounded-lg mb-4">
            <p class="font-semibold">Resumen de compra</p>
            <ul class="mt-2 space-y-1">
              ${renderProducts(productsData)}
              <li class="flex justify-between text-sm border-t border-gray-300 pt-1 mt-1">
                <span>Impuestos (15%)</span>
                <span>${Formatter.currency(taxValue)}</span>
              </li>
              <li class="flex justify-between font-bold text-base mt-2">
                <span>Total:</span>
                <span>${Formatter.currency(totalValue)}</span>
              </li>
            </ul>
          </div>
        </div>
      `,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Imprimir recibo',
      cancelButtonText: 'Cancelar',
      confirmButtonColor: '#10B981',
      cancelButtonColor: '#EF4444',
      reverseButtons: true,
      customClass: {
        popup: 'rounded-xl',
        confirmButton: 'mr-2 px-4 py-2 rounded-lg',
        cancelButton: 'px-4 py-2 rounded-lg'
      },
      buttonsStyling: false
    });
    
    if (result.isConfirmed) {
      // Información de la tienda
      const storeInfo = {
        name: "Broquelizate",
        address: "esquina con, Calle Escobedo, Bravo 222, Colonia Centro, 35000 Gómez Palacio, Dgo.",
        phone: "+528714617696",
        rfc: "XAXX010101000"
      };

      // Generar el ticket
      const pdfDoc = generateTicket(productsData, taxValue, totalValue, storeInfo);
      
      Swal.fire({
        title: 'Recibo generado',
        html: `
          <div class="text-center">
            <svg class="w-16 h-16 text-green-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="mb-4">Tu recibo se ha generado correctamente.</p>
            <p class="text-sm text-gray-600 mb-6">Puedes recoger tu pedido en nuestro local o esperar la entrega.</p>
            <button id="print-receipt" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors">
              Imprimir recibo
            </button>
          </div>
        `,
        showConfirmButton: false,
        customClass: {
          popup: 'rounded-xl'
        }
      });
      
      // Agregar evento al botón de imprimir
      setTimeout(() => {
        const printButton = document.getElementById('print-receipt');
        if (printButton) {
          printButton.addEventListener('click', () => {
            printTicket(pdfDoc);
            Cookies.clearCart(); // Limpiar el carrito
            Swal.close();
            navigate('/order-success');
          });
        }
      }, 100);
    }
  }

  // Inicialización cuando la página está lista
  document.addEventListener('astro:page-load', () => {
    // Configurar eventos de los métodos de pago
    const paymentRadios = document.querySelectorAll('input[name="payment-method"]');
    paymentRadios.forEach(radio => {
      radio.addEventListener('change', updatePaymentVisibility);
    });
    
    // Configurar formulario de tarjeta
    const paymentForm = document.getElementById('payment-form');
    if (paymentForm) {
      paymentForm.addEventListener('submit', handleCardPayment);
    }
    
    // Configurar botón de pago en efectivo
    const payCashBtn = document.getElementById('pay-cash');
    if (payCashBtn) {
      payCashBtn.addEventListener('click', handleCashPayment);
    }
    
    // Establecer estado inicial
    updatePaymentVisibility();
    
 // CORRECCIÓN: Mejorar UX de los métodos de pago (versión corregida)
    const paymentOptions = document.querySelectorAll('.flex.items-center');
    paymentOptions.forEach(option => {
      option.addEventListener('click', function(this: HTMLElement) {
        // Remover selección de todas las opciones
        paymentOptions.forEach(opt => {
          const parent = opt.closest('.flex.items-center');
          if (parent) {
            parent.classList.remove('selected');
          }
        });
        
        // Agregar selección a la opción actual
        const currentParent = this.closest('.flex.items-center');
        if (currentParent) {
          currentParent.classList.add('selected');
        }
      });
    });
  });
</script>

<!-- Elementos ocultos con datos -->
<div id="products-data" style="display: none;">{JSON.stringify(products)}</div>
<div id="tax-data" style="display: none;">{tax}</div>
<div id="total-data" style="display: none;">{total}</div>