---
// src/pages/admin/checkout.astro
import { Icon } from 'astro-icon/components';
import { actions } from 'astro:actions';

type Client = {
  id: number;
  name: string;
  email?: string | null;
  address?: string | null;
  neighborhood?: string | null;
  city?: string | null;
  state?: string | null;
  postalCode?: string | null;
  country?: string | null;
  elector_key: string | null;
  current_balance: number;
  observations: string | null;
  phone: string | null;
  created_at: Date;
};

// Aunque la creación de la orden no usa una acción, mantenemos esta
// para obtener la lista de clientes.
const { data: clientsData, error: err } = await Astro.callAction(
  actions.getAllClients,
  {}
);

const clientsList: Client[] = clientsData?.clients || [];
---

<div class="flex h-screen bg-gray-50 font-sans text-gray-800 rounded-lg">
  <main class="flex-1 p-8 overflow-y-auto space-y-8">
    <header class="flex items-center justify-between border-b border-gray-200 pb-4">
      <h1 class="text-3xl font-extrabold text-yellow-600 tracking-tight">Vender</h1>
      <span id="header-total" class="text-3xl font-extrabold text-gray-900">$0.00</span>
    </header>

    <!-- Cliente -->
    <section class="bg-white rounded-xl shadow-lg p-6">
      <div class="flex items-center justify-between">
          <h2 class="text-xl font-semibold text-gray-900">Cliente</h2>
          <a href="/admin/clients/create" aria-label="Agregar nuevo cliente" class="bg-yellow-100 text-yellow-600 hover:bg-yellow-200 rounded-full p-3 transition">
              <Icon name="mdi:plus" class="h-6 w-6" />
          </a>
      </div>
      <div class="mt-4">
        <label for="client-select" class="block text-sm font-medium text-gray-700 mb-2">Seleccionar un cliente existente</label>
        <select id="client-select" class="w-full rounded-lg border border-gray-300 p-3 focus:border-yellow-500 focus:ring-yellow-500 transition-shadow">
          <option value="">Cliente general (mostrador)</option>
          {clientsList.map(client => (
            <option value={client.id}>{client.name}</option>
          ))}
        </select>
      </div>
    </section>

    <!-- Observación -->
    <section class="bg-white rounded-xl shadow-lg p-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Observación</h2>
      <textarea
        id="observation"
        placeholder="Digite la observación aquí"
        class="w-full h-24 rounded-lg border border-gray-300 p-4 placeholder-gray-400 focus:border-yellow-500 focus:ring-yellow-500 transition-shadow"
      ></textarea>
      <div class="flex items-center mt-4">
        <input
          type="checkbox"
          id="show-on-receipt"
          class="h-5 w-5 rounded border-gray-300 text-yellow-500 focus:ring-yellow-500"
        />
        <label for="show-on-receipt" class="ml-2 text-gray-600">Mostrar en el recibo</label>
      </div>
    </section>

    <!-- Carrito -->
    <details class="bg-white rounded-xl shadow-lg" open>
      <summary class="flex items-center justify-between p-6 cursor-pointer list-none">
        <h2 id="item-count" class="text-xl font-semibold text-gray-900">0 Items</h2>
        <Icon name="mdi:chevron-down" class="h-6 w-6 transition-transform" />
      </summary>
      <div class="px-6 pb-6">
        <ul id="cart-items-summary" class="space-y-4 border-t pt-4">
          <p class="text-gray-500 italic">El carrito está vacío.</p>
        </ul>
      </div>
    </details>
  </main>

  <!-- Aside Resumen y Pago -->
  <aside class="w-full max-w-md bg-white p-8 space-y-8 border-l border-gray-200 rounded-lg">
    <!-- Resumen del pedido -->
    <section class="space-y-6">
      <h2 class="text-2xl font-extrabold text-gray-900">Resumen del pedido</h2>
      <div class="space-y-4 text-md">
        <div class="flex justify-between">
          <span class="text-gray-600">Subtotal de productos</span>
          <span id="summary-subtotal" class="font-semibold text-yellow-600">$0.00</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-600">Entrega</span>
          <a href="#" class="font-semibold text-yellow-600 hover:underline">Añadir opción de entrega</a>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-600">Descuentos</span>
          <a href="#" class="font-semibold text-yellow-600 hover:underline">Dar descuento</a>
        </div>
      </div>
      <div class="border-t border-gray-200"></div>
      <div class="flex justify-between text-2xl">
        <span class="font-extrabold">Total</span>
        <span id="summary-total" class="font-extrabold text-gray-900">$0.00</span>
      </div>
    </section>

    <!-- Método de pago -->
    <section class="space-y-6">
      <h2 class="text-2xl font-extrabold text-gray-900">Método de pago</h2>
      <div class="space-y-4">
        <!-- Efectivo -->
        <label class="block border rounded-lg p-4 has-[:checked]:border-yellow-500 has-[:checked]:bg-yellow-50 transition-all">
          <div class="flex items-center gap-4">
            <input type="radio" name="payment-method" value="Efectivo" class="h-5 w-5 focus:ring-yellow-500 text-yellow-500" checked />
            <Icon name="mdi:cash-multiple" class="h-6 w-6 text-gray-600" />
            <span class="font-semibold text-gray-900">Efectivo</span>
          </div>
          <div class="mt-4 pl-10">
            <input
              type="text"
              id="amount-received"
              placeholder="Valor recibido"
              class="w-full rounded-lg border border-gray-300 p-3 placeholder-gray-400 focus:border-yellow-500 focus:ring-yellow-500 transition-shadow"
            />
          </div>
        </label>
        <!-- Débito -->
        <label class="flex items-center gap-4 border rounded-lg p-4 has-[:checked]:border-yellow-500 has-[:checked]:bg-yellow-50 transition-all">
          <input type="radio" name="payment-method" value="Débito" class="h-5 w-5 focus:ring-yellow-500 text-yellow-500" />
          <Icon name="mdi:credit-card-outline" class="h-6 w-6 text-gray-600" />
          <span class="font-semibold text-gray-900">Débito</span>
        </label>
        <!-- Crédito -->
        <label class="flex items-center gap-4 border rounded-lg p-4 has-[:checked]:border-yellow-500 has-[:checked]:bg-yellow-50 transition-all">
          <input type="radio" name="payment-method" value="Crédito" class="h-5 w-5 focus:ring-yellow-500 text-yellow-500" />
          <Icon name="mdi:credit-card-outline" class="h-6 w-6 text-gray-600" />
          <span class="font-semibold text-gray-900">Crédito</span>
        </label>
        <!-- Otros -->
        <label class="flex items-center gap-4 border rounded-lg p-4 has-[:checked]:border-yellow-500 has-[:checked]:bg-yellow-50 transition-all">
            <input type="radio" name="payment-method" value="Otros" class="h-5 w-5 focus:ring-yellow-500 text-yellow-500" />
            <Icon name="mdi:dots-horizontal-circle-outline" class="h-6 w-6 text-gray-600" />
            <span class="font-semibold text-gray-900">Otros</span>
        </label>
        <!-- Venta a crédito -->
        <details class="border rounded-lg">
          <summary class="p-4 flex items-center gap-4 cursor-pointer list-none">
            <Icon name="mdi:chevron-down" class="h-6 w-6 transition-transform" />
            <span class="font-semibold text-gray-900">Venta a crédito</span>
          </summary>
          <div class="p-4 border-t border-gray-200">Contenido de venta a crédito...</div>
        </details>
        <!-- Link de pago (próximo) -->
        <div class="flex items-center gap-4 border rounded-lg p-4 bg-gray-50 text-gray-400 opacity-70">
          <Icon name="mdi:link-variant" class="h-6 w-6" />
          <span class="font-semibold">Link de Pago</span>
          <span class="ml-auto text-xs font-bold bg-gray-200 text-gray-600 px-2 py-1 rounded-full">PRONTO</span>
        </div>
      </div>
          <div class="fixed bottom-0 left-0 lg:left-80 right-0 bg-white/80 backdrop-blur-sm border-t border-slate-200 p-4 z-50">
          <div class="max-w-6xl mx-auto flex justify-end gap-4">
              <button type="button" id="finalize-sale-btn" class="bg-yellow-600 hover:bg-yellow-700 text-white font-bold px-8 py-3 rounded-lg shadow-lg transition-transform hover:scale-105">
                Finalizar venta
              </button>
              <button type="button" id="discard-sale-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold px-8 py-3 rounded-lg shadow-lg transition-transform hover:scale-105">
                Descartar Venta
              </button>
          </div>
      </div>
    </section>
  </aside>
</div>

<style>
  details[open] > summary > svg {
    transform: rotate(180deg);
  }
</style>

<script define:vars={{ clientsList }}>
  import Swal from 'sweetalert2';
  import 'sweetalert2/dist/sweetalert2.min.css';

  // --- INTERFACES ---
  interface CartItem {
    id: number;
    name: string;
    price: number;
    quantity: number;
    images?: string[];
  }

  // Se define el tipo para la lista de clientes que se pasa desde Astro
  type Client = {
    id: number;
    name: string;
    email?: string | null;
  };
  // `clientsList` está disponible globalmente en este script gracias a `define:vars`
  declare const clientsList: Client[];

  // --- LÓGICA DE INICIALIZACIÓN ---
  function initializeCheckout() {
    const cart: CartItem[] = JSON.parse(localStorage.getItem('admin-pos-cart') || '[]');
    
    const headerTotalEl = document.getElementById('header-total');
    const summarySubtotalEl = document.getElementById('summary-subtotal');
    const summaryTotalEl = document.getElementById('summary-total');
    const amountReceivedEl = document.getElementById('amount-received') as HTMLInputElement | null;
    const itemCountEl = document.getElementById('item-count');
    const cartSummaryListEl = document.getElementById('cart-items-summary');

    const formatCurrency = (value: number) => `$${Number(value).toFixed(2)}`;
    
    const subtotal = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const total = subtotal; // Aquí podrías sumar descuentos, envíos, etc.

    if (headerTotalEl) headerTotalEl.textContent = formatCurrency(total);
    if (summarySubtotalEl) summarySubtotalEl.textContent = formatCurrency(subtotal);
    if (summaryTotalEl) summaryTotalEl.textContent = formatCurrency(total);
    if (amountReceivedEl) amountReceivedEl.placeholder = `Valor recibido (${formatCurrency(total)})`;
    if (itemCountEl) itemCountEl.textContent = `${cart.length} ${cart.length === 1 ? 'Item' : 'Items'}`;

    if (cartSummaryListEl) {
      if (cart.length > 0) {
        cartSummaryListEl.innerHTML = cart.map((item) => `
          <li class="flex items-center gap-4">
            <img src="${item.images?.[0] || 'https://placehold.co/100'}" alt="${item.name}" class="h-12 w-12 rounded-md object-cover" />
            <div class="flex-grow">
              <p class="font-semibold">${item.name}</p>
              <p class="text-sm text-gray-600">${item.quantity} x ${formatCurrency(item.price)}</p>
            </div>
            <p class="font-semibold">${formatCurrency(item.price * item.quantity)}</p>
          </li>
        `).join('');
      } else {
        cartSummaryListEl.innerHTML = '<p class="text-gray-500">El carrito está vacío. Vuelve al TPV para agregar productos.</p>';
      }
    }
  }

  // --- LÓGICA DE CHECKOUT ---
  async function handleFinalizeSale() {
    Swal.fire({
      title: 'Procesando Venta...',
      html: 'Por favor, espera un momento.',
      allowOutsideClick: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      },
      customClass: { popup: 'rounded-xl' }
    });

    try {
      // 1. Recopilar datos del carrito y del formulario
      const cart: CartItem[] = JSON.parse(localStorage.getItem('admin-pos-cart') || '[]');
      if (cart.length === 0) {
        throw new Error("El carrito está vacío. No se puede finalizar la venta.");
      }

      const clientSelectEl = document.getElementById('client-select') as HTMLSelectElement;
      const paymentMethodEl = document.querySelector('input[name="payment-method"]:checked') as HTMLInputElement;
      
      const clientId = clientSelectEl.value ? parseInt(clientSelectEl.value, 10) : null;
      const paymentMethod = paymentMethodEl.value;
      
      // ✅ CORRECCIÓN: Determinar el correo electrónico a usar
      const selectedClient = clientId ? clientsList.find(c => c.id === clientId) : null;
      const customerEmail = selectedClient?.email || 'mostrador@tienda.com'; // Usar email del cliente o uno por defecto

      const subtotal = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
      const total = subtotal;

      // 2. Preparar datos para la API (payload)
      const orderData = {
        clientId: clientId,
        customerEmail: customerEmail, // Se envía el email determinado
        shippingAddress: {}, // Opcional: Recopilar de un formulario si es necesario
        products: cart.map(p => ({
          id: p.id,
          name: p.name,
          price: p.price,
          quantity: p.quantity
        })),
        subtotal: subtotal,
        tax: 0, // Ajustar si manejas impuestos
        total: total,
        paymentMethod: paymentMethod,
      };

      // 3. Llamar al endpoint de la API con fetch
      const response = await fetch('/api/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData)
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || `Error HTTP: ${response.status}`);
      }
      
      Swal.close();

      // 4. Mostrar mensaje de éxito
      await Swal.fire({
        icon: 'success',
        title: '¡Venta Finalizada!',
        html: `La orden <strong>#${result.orderNumber}</strong> ha sido registrada exitosamente.`,
        confirmButtonText: 'Genial',
        customClass: { popup: 'rounded-xl' }
      });
      
      // 5. Limpiar carrito y redirigir
      localStorage.removeItem('admin-pos-cart');
      window.location.href = '/admin/pos'; // Redirigir al punto de venta

    } catch (error: any) {
      Swal.close();
      console.error('Error al finalizar la venta:', error);
      
      await Swal.fire({
        icon: 'error',
        title: 'Error en la Venta',
        text: error.message || 'Ocurrió un problema al procesar la venta. Intenta de nuevo.',
        confirmButtonText: 'Entendido',
        customClass: { popup: 'rounded-xl' }
      });
    }
  }

  // --- MANEJADORES DE EVENTOS ---
  function setupEventListeners() {
    const finalizeBtn = document.getElementById('finalize-sale-btn');
    finalizeBtn?.addEventListener('click', handleFinalizeSale);
    
    const discardBtn = document.getElementById('discard-sale-btn');
    discardBtn?.addEventListener('click', () => {
        Swal.fire({
            title: '¿Descartar Venta?',
            text: "Se perderán todos los productos del carrito.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#6b7280',
            confirmButtonText: 'Sí, descartar',
            cancelButtonText: 'No, cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                localStorage.removeItem('admin-pos-cart');
                window.location.href = '/admin/pos';
            }
        })
    });
  }

  document.addEventListener('astro:page-load', () => {
    initializeCheckout();
    setupEventListeners();
  });

  // Ejecución inicial en caso de que no sea una navegación del lado del cliente
  initializeCheckout();
  setupEventListeners();
</script>
