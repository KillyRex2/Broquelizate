---
// src/components/admin/StatsGrid.astro
import { db, orders } from 'astro:db';
import { sql, and, gte, lte } from 'drizzle-orm';

// Obtener la fecha actual y calcular rangos
const now = new Date();
const startOfCurrentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
const startOfPreviousMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
const endOfPreviousMonth = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);

// Función para formatear moneda
const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('es-MX', { 
    style: 'currency', 
    currency: 'MXN',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(value);
};

// Consulta 1: Ingresos totales (todos los pedidos)
const totalRevenueResult = await db.select({
  total: sql<number>`SUM(${orders.total})`.mapWith(Number)
}).from(orders);

const totalRevenue = totalRevenueResult[0]?.total || 0;

// Consulta 2: Ingresos del mes actual
const currentMonthRevenueResult = await db.select({
  total: sql<number>`SUM(${orders.total})`.mapWith(Number)
}).from(orders)
.where(and(
  gte(orders.createdAt, startOfCurrentMonth),
  lte(orders.createdAt, now)
));

const currentMonthRevenue = currentMonthRevenueResult[0]?.total || 0;

// Consulta 3: Ingresos del mes pasado
const previousMonthRevenueResult = await db.select({
  total: sql<number>`SUM(${orders.total})`.mapWith(Number)
}).from(orders)
.where(and(
  gte(orders.createdAt, startOfPreviousMonth),
  lte(orders.createdAt, endOfPreviousMonth)
));

const previousMonthRevenue = previousMonthRevenueResult[0]?.total || 0;

// Calcular cambio porcentual para ingresos
const revenueChange = previousMonthRevenue > 0 
  ? ((currentMonthRevenue - previousMonthRevenue) / previousMonthRevenue) * 100 
  : currentMonthRevenue > 0 ? 100 : 0;

// Consulta 4: Total de pedidos
const totalOrdersResult = await db.select({
  count: sql<number>`COUNT(*)`.mapWith(Number)
}).from(orders);

const totalOrders = totalOrdersResult[0]?.count || 0;

// Consulta 5: Pedidos del mes actual
const currentMonthOrdersResult = await db.select({
  count: sql<number>`COUNT(*)`.mapWith(Number)
}).from(orders)
.where(and(
  gte(orders.createdAt, startOfCurrentMonth),
  lte(orders.createdAt, now)
));

const currentMonthOrders = currentMonthOrdersResult[0]?.count || 0;

// Consulta 6: Pedidos del mes pasado
const previousMonthOrdersResult = await db.select({
  count: sql<number>`COUNT(*)`.mapWith(Number)
}).from(orders)
.where(and(
  gte(orders.createdAt, startOfPreviousMonth),
  lte(orders.createdAt, endOfPreviousMonth)
));

const previousMonthOrders = previousMonthOrdersResult[0]?.count || 0;

// Calcular cambio porcentual para pedidos
const ordersChange = previousMonthOrders > 0 
  ? ((currentMonthOrders - previousMonthOrders) / previousMonthOrders) * 100 
  : currentMonthOrders > 0 ? 100 : 0;

// Formatear valores para mostrar
const formattedTotalRevenue = formatCurrency(totalRevenue);
const formattedCurrentMonthRevenue = formatCurrency(currentMonthRevenue);
const formattedTotalOrders = totalOrders.toLocaleString('es-MX');
const formattedCurrentMonthOrders = currentMonthOrders.toLocaleString('es-MX');
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
  <!-- Cuadro de Ingresos Totales -->
  <div class="bg-white rounded-xl shadow-sm p-6">
    <div class="flex justify-between">
      <div>
        <p class="text-sm text-gray-500">Ingresos Totales</p>
        <p class="text-2xl font-bold mt-1">{formattedTotalRevenue}</p>
      </div>
      <div class="bg-blue-100 rounded-full w-12 h-12 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    </div>
    <p class="text-sm mt-2">
      <span class={revenueChange >= 0 ? 'text-green-500' : 'text-red-500'}>
        {revenueChange >= 0 ? '↑' : '↓'} {Math.abs(revenueChange).toFixed(1)}%
      </span>
      <span class="text-gray-500"> este mes: {formattedCurrentMonthRevenue}</span>
    </p>
  </div>
  
  <!-- Cuadro de Pedidos -->
  <div class="bg-white rounded-xl shadow-sm p-6">
    <div class="flex justify-between">
      <div>
        <p class="text-sm text-gray-500">Pedidos</p>
        <p class="text-2xl font-bold mt-1">{formattedTotalOrders}</p>
      </div>
      <div class="bg-green-100 rounded-full w-12 h-12 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
        </svg>
      </div>
    </div>
    <p class="text-sm mt-2">
      <span class={ordersChange >= 0 ? 'text-green-500' : 'text-red-500'}>
        {ordersChange >= 0 ? '↑' : '↓'} {Math.abs(ordersChange).toFixed(1)}%
      </span>
      <span class="text-gray-500"> este mes: {formattedCurrentMonthOrders}</span>
    </p>
  </div>
  
  <!-- Cuadro de Clientes (a implementar más adelante) -->
  <div class="bg-white rounded-xl shadow-sm p-6">
    <div class="flex justify-between">
      <div>
        <p class="text-sm text-gray-500">Clientes</p>
        <p class="text-2xl font-bold mt-1">2,980</p>
      </div>
      <div class="bg-purple-100 rounded-full w-12 h-12 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      </div>
    </div>
    <p class="text-sm text-green-500 mt-2">
      <span>↑</span> 5.7% desde el mes pasado
    </p>
  </div>
  
  <!-- Cuadro de Tasa de Conversión (a implementar más adelante) -->
  <div class="bg-white rounded-xl shadow-sm p-6">
    <div class="flex justify-between">
      <div>
        <p class="text-sm text-gray-500">Tasa de Conversión</p>
        <p class="text-2xl font-bold mt-1">3.8%</p>
      </div>
      <div class="bg-yellow-100 rounded-full w-12 h-12 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      </div>
    </div>
    <p class="text-sm text-red-500 mt-2">
      <span>↓</span> 1.2% desde el mes pasado
    </p>
  </div>
</div>