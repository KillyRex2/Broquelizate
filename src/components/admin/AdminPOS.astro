---
// src/pages/admin/pos.astro
import { actions } from 'astro:actions';
import type { ProductWithImages } from '@/interfaces';
import { Icon } from 'astro-icon/components';
import AdminProductCard from '@/components/admin/AdminProductCard.astro';

const { data: allProducts = [], error } = await Astro.callAction(actions.getAllProductsWithImages, undefined);
const categories = Array.from(new Set(allProducts.map(p => p.category).filter(Boolean)));
---

<div class="flex bg-gray-100 font-sans text-gray-800 rounded-lg">
  {/* ✅ CORRECCIÓN 1: Se añade 'overflow-hidden' para forzar al contenido a respetar los límites de altura */}
  <main class="flex-1 flex flex-col p-4 md:p-6 bg-gray-100 rounded-lg">
    <header class="mb-6 flex flex-col md:flex-row items-center gap-4">
      <h1 class="text-2xl font-bold text-gray-900 hidden lg:block">Broqueventa</h1>
      <div class="relative flex-grow w-full">
        <Icon name="mdi:magnify" class="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
        <input
          type="text"
          id="search-input"
          placeholder="Buscar por nombre o SKU..."
          class="w-full rounded-full border border-gray-300 bg-white py-2.5 pl-12 pr-4 focus:border-amber-500 focus:ring-1 focus:ring-amber-500"
        />
      </div>
      <select id="category-filter" class="w-full md:w-auto rounded-full border-gray-300 bg-white py-2.5 px-4 focus:border-amber-500 focus:ring-1 focus:ring-amber-500">
        <option value="all">Todas las categorías</option>
        {categories.map(category => (
          <option value={category}>{category}</option>
        ))}
      </select>
    </header>
    
    {/* ✅ CORRECCIÓN 2: Se usa un grid automático que asegura un tamaño mínimo para las tarjetas. */}
 <div 
   id="product-grid" 
   class="grid grid-cols-[repeat(auto-fill,minmax(180px,1fr))] gap-5 overflow-y-scroll p-2"
   style="max-height: calc(100vh - 7rem);"
 >
      {allProducts.map(product => (
        <AdminProductCard product={product} />
      ))}
    </div>
  </main>
  
  {/* --- La barra lateral del carrito se mantiene igual --- */}
  <aside class="flex w-full max-w-sm flex-col border-l border-gray-200 bg-white shadow-lg">
    <div class="flex items-center justify-between border-b p-4">
      <h2 class="text-xl font-bold text-gray-800">Orden Actual</h2>
      <button id="clear-cart-btn" class="text-sm font-medium text-red-500 hover:text-red-700 transition-colors">Vaciar Carrito</button>
    </div>
    <ul id="cart-items-list" class="flex-1 space-y-3 overflow-y-auto p-4">
      <div id="cart-placeholder" class="flex h-full flex-col items-center justify-center text-center text-gray-400">
        <Icon name="mdi:cart-outline" class="h-16 w-16" />
        <p>Los productos agregados aparecerán aquí.</p>
      </div>
    </ul>
    <div class="border-t bg-gray-50 p-4">
      <div class="space-y-2 text-sm">
        <div class="flex justify-between">
          <span class="text-gray-600">Subtotal</span>
          <span id="subtotal-amount" class="font-medium text-gray-800">$0.00</span>
        </div>
        <div class="flex justify-between text-lg">
          <span class="font-bold text-gray-900">Total</span>
          <span id="total-amount" class="font-bold text-gray-900">$0.00</span>
        </div>
      </div>
      <button
        id="checkout-button"
        class="mt-4 w-full rounded-lg bg-amber-500 py-3 text-base font-bold text-white shadow-md transition hover:bg-amber-600 disabled:cursor-not-allowed disabled:bg-gray-300"
        disabled
      >
        Ir al Pago
      </button>
    </div>
  </aside>
</div>
<script define:vars={{ allProducts }}>
 
  function initializePOS() {
    
    // ... selectores del DOM ...
    const productGrid = document.getElementById('product-grid');
    const cartItemsList = document.getElementById('cart-items-list');
    const cartPlaceholder = document.getElementById('cart-placeholder');
    const subtotalAmount = document.getElementById('subtotal-amount');
    const totalAmount = document.getElementById('total-amount');
    const checkoutButton = document.getElementById('checkout-button');
    const searchInput = document.getElementById('search-input');
    const categoryFilter = document.getElementById('category-filter');
    const clearCartBtn = document.getElementById('clear-cart-btn');

    let cart = JSON.parse(localStorage.getItem('admin-pos-cart') || '[]');

    const formatCurrency = (value) => `$${Number(value).toFixed(2)}`;

    function renderProductGrid(productsToRender) {
      productGrid.innerHTML = productsToRender.map(product => {
        // ✅ CORRECCIÓN AQUÍ:
        const imageUrl = product.images?.[0] || 'https://placehold.co/400x400/1a202c/e2e8f0?text=Sin+Imagen';
        return `
          <article class="group relative flex cursor-pointer flex-col overflow-hidden rounded-lg bg-white shadow-md transition-all duration-300 hover:shadow-xl hover:-translate-y-1" data-product-id="${product.id}">
            <div class="aspect-square overflow-hidden">
              <img src="${imageUrl}" alt="${product.name}" class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-110" loading="lazy"/>
            </div>
            <div class="flex flex-1 flex-col p-4">
              <h3 class="flex-1 text-sm font-medium text-gray-800 line-clamp-2">${product.name}</h3>
              <div class="mt-3">
                <p class="text-lg font-bold text-gray-900">${formatCurrency(product.price)}</p>
              </div>
            </div>
            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center">
              <div class="w-12 h-12 bg-amber-500 rounded-full flex items-center justify-center text-white opacity-0 group-hover:opacity-100 group-hover:scale-110 transform scale-90 transition-all duration-300 pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6m0 0v6m0-6h6m-6 0H6" /></svg>
              </div>
            </div>
          </article>
        `;
      }).join('');
    }

    function renderCart() {
      if (cart.length > 0) {
        cartPlaceholder.style.display = 'none';
        cartItemsList.innerHTML = cart.map(item => {
          // ✅ Y CORRECCIÓN AQUÍ:
          const imageUrl = item.images?.[0] || 'https://placehold.co/400x400/1a202c/e2e8f0?text=Sin+Imagen';
          return `
            <li class="flex items-center gap-3 text-sm p-2 rounded-md hover:bg-gray-50">
              <img src="${imageUrl}" alt="${item.name}" class="h-12 w-12 rounded-md object-cover" />
              <div class="flex-grow">
                <p class="font-medium text-gray-800 line-clamp-1">${item.name}</p>
                <div class="flex items-center gap-2 mt-1">
                  <button data-action="decr" data-id="${item.id}" class="qty-btn">-</button>
                  <input type="number" value="${item.quantity}" min="1" data-id="${item.id}" class="w-12 border rounded-md bg-transparent text-center font-medium qty-input" />
                  <button data-action="incr" data-id="${item.id}" class="qty-btn">+</button>
                </div>
              </div>
              <p class="font-semibold w-20 text-right">${formatCurrency(item.price * item.quantity)}</p>
              <button data-action="remove" data-id="${item.id}" class="text-gray-400 hover:text-red-500 p-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
              </button>
            </li>
          `;
        }).join('');
        checkoutButton.disabled = false;
      } else {
        cartItemsList.innerHTML = '';
        cartPlaceholder.style.display = 'flex';
        checkoutButton.disabled = true;
      }
      const subtotal = cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
      subtotalAmount.textContent = formatCurrency(subtotal);
      totalAmount.textContent = formatCurrency(subtotal);
    }

 // --- LÓGICA DEL CARRITO ---
    function addToCart(productId) {
      const product = allProducts.find(p => p.id === productId);
      if (!product) return;
      const existingItem = cart.find(i => i.id === productId);
      if (existingItem) {
        existingItem.quantity++;
      } else {
        cart.push({ ...product, quantity: 1 });
      }
      updateAndSaveCart();
    }

    function updateQuantity(productId, newQuantity) {
      const item = cart.find(i => i.id === productId);
      if (!item) return;
      
      const qty = parseInt(newQuantity);
      if (isNaN(qty)) {
        console.error('Cantidad inválida:', newQuantity);
        renderCart(); 
        return;
      }
      
      if (qty < 1) {
        cart = cart.filter(i => i.id !== productId);
      } else {
        item.quantity = qty;
      }
      updateAndSaveCart();
    }

    function clearCart() {
      if (confirm('¿Estás seguro de que quieres vaciar el carrito?')) {
        cart = [];
        updateAndSaveCart();
      }
    }

    function updateAndSaveCart() {
      renderCart();
      localStorage.setItem('admin-pos-cart', JSON.stringify(cart));
    }

    // --- FILTRADO Y BÚSQUEDA ---
    function filterAndRender() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      const category = categoryFilter.value;

      const filteredProducts = allProducts.filter(p => {
        const matchesSearch = 
          p.name.toLowerCase().includes(searchTerm) || 
          (p.sku && p.sku.toLowerCase().includes(searchTerm));
        const matchesCategory = category === 'all' || p.category === category;
        return matchesSearch && matchesCategory;
      });
      renderProductGrid(filteredProducts);
    }

    // --- EVENT LISTENERS ---
    productGrid.addEventListener('click', (e) => {
      const card = e.target.closest('[data-product-id]');
      if (card) addToCart(card.dataset.productId);
    });

    cartItemsList.addEventListener('click', (e) => {
      const button = e.target.closest('button[data-action]');
      if (!button) return;
      const { action, id } = button.dataset;
      const item = cart.find(i => i.id === id);
      if (!item) return;

      if (action === 'remove') updateQuantity(id, 0);
      if (action === 'incr') updateQuantity(id, item.quantity + 1);
      if (action === 'decr') updateQuantity(id, item.quantity - 1);
    });
    
    cartItemsList.addEventListener('change', (e) => {
      const input = e.target;
      if (input.matches('.qty-input')) {
        updateQuantity(input.dataset.id, input.value);
      }
    });

    searchInput.addEventListener('input', filterAndRender);
    categoryFilter.addEventListener('change', filterAndRender);
    clearCartBtn.addEventListener('click', clearCart);
    
    checkoutButton.addEventListener('click', () => {
      if (cart.length > 0) {
        localStorage.setItem('admin-pos-cart', JSON.stringify(cart));
        
        // ✅ CORRECCIÓN: Se usa window.location.href para una navegación fiable.
        window.location.href = '/admin/checkout';
      }
    });

    // --- EJECUCIÓN INICIAL ---
    // No llamamos a renderProductGrid al inicio, porque el servidor ya lo hizo.
    // Solo renderizamos el carrito basado en lo que haya en localStorage.
    renderCart();
  }

  document.addEventListener('astro:page-load', initializePOS);
  initializePOS();
</script>

<style is:global>
  .qty-btn { 
    height: 1.5rem;
    width: 1.5rem;
    border-radius: 9999px;
    background-color: #e5e7eb;
    color: #374151;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  .qty-btn:hover { background-color: #d1d5db; }
  .qty-input { 
    width: 3rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    text-align: center;
    font-weight: 500;
    padding: 0.25rem;
    -moz-appearance: textfield; 
  }
  .qty-input:focus {
    border-color: #f59e0b;
    outline: none;
    box-shadow: 0 0 0 2px rgba(245, 158, 11, 0.4);
  }
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button { 
    -webkit-appearance: none; 
    margin: 0; 
  }
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  [data-product-id]:active {
    animation: pulse 0.3s ease;
  }
  #product-grid::-webkit-scrollbar, 
  #cart-items-list::-webkit-scrollbar {
    scrollbar-gutter: stable;
    width: 8px;
    height: 8px;
  }
  #product-grid::-webkit-scrollbar-track, 
  #cart-items-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  #product-grid::-webkit-scrollbar-thumb, 
  #cart-items-list::-webkit-scrollbar-thumb {
    background: #c5c5c5;
    border-radius: 10px;
  }
  #product-grid::-webkit-scrollbar-thumb:hover, 
  #cart-items-list::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
  #checkout-button:hover:not([disabled]) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
  }
</style>