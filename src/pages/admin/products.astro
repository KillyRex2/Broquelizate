---
import ProductImage from "@/components/products/ProductImage.astro";
import Pagination from "@/components/shared/Pagination.astro";
import ProductsLayout from "@/layouts/ProductsLayout.astro";
import { Formatter } from "@/utils";
import { actions } from "astro:actions";

const searchParams = Astro.url.searchParams;
const pageParam = Number(searchParams.get('page') ?? 1);

const { data, error } = await Astro.callAction(
  actions.getProductsByPage,
  {
    page: pageParam,
  }
);

if (error) {
  return Astro.redirect('/');
}

const { products, totalPages } = data;
---
<ProductsLayout title="Panel de Administración">
  <div class="max-w-7xl mx-auto px-6 py-10 space-y-6">
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-3xl font-bold text-gray-200">Gestión de Inventario</h1>
        <p class="text-gray-400 mt-1">Gestión de productos y control de stock</p>
      </div>
      <a href="/admin/products/new" class="inline-flex items-center bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium transition hover:bg-indigo-700">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        Nuevo Producto
      </a>
    </div>

    <div class="bg-white rounded-xl shadow p-6">
      <div class="overflow-x-auto">
        <table class="w-full min-w-max divide-y divide-gray-200">
          <thead>
            <tr>
              <th class="bg-gray-50 text-left text-sm font-medium text-gray-600 px-6 py-3">Imagen</th>
              <th class="bg-gray-50 text-left text-sm font-medium text-gray-600 px-6 py-3">Título</th>
              <th class="bg-gray-50 text-left text-sm font-medium text-gray-600 px-6 py-3">Precio</th>
              <th class="bg-gray-50 text-left text-sm font-medium text-gray-600 px-6 py-3">Stock</th>
              <th class="bg-gray-50 text-left text-sm font-medium text-gray-600 px-6 py-3">Acciones</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product) => (
              <tr id={`product-row-${product.id}`}>
                <td class="px-6 py-4">
                  {product.images && product.images.length > 0 ? (
                    <ProductImage src={product.images[0]} alt={product.name} className="h-16 w-16 object-contain rounded-lg" />
                  ) : (
                    <div class="flex items-center justify-center h-16 w-16 bg-gray-100 rounded-lg">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-6-6h.01" />
                      </svg>
                    </div>
                  )}
                </td>
                <td class="px-6 py-4">
                  <a href={`/admin/products/${product.slug}`} class="text-gray-600 hover:underline font-medium">
                    {product.name}
                  </a>
                </td>
                <td class="px-6 py-4 font-semibold text-gray-800">
                  {Formatter.currency(product.price)}
                </td>
                <td class="px-6 py-4">
                  <span class={product.stock > 0 ? 'text-green-600' : 'text-red-600'}>
                    {product.stock} unidades
                  </span>
                </td>
                <td class="px-6 py-4 flex space-x-2">
                  <a href={`/admin/products/${product.slug}`} class="p-2 rounded hover:bg-gray-200" title="Editar">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500 hover:text-blue-700" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793z" />
                      <path d="M11.38 5.793L3 14.172V17h2.828l8.38-8.379-2.828-2.828z" />
                    </svg>
                  </a>
                  <button 
                    type="button"
                    class="p-2 rounded text-red-500 hover:text-red-700 hover:bg-gray-200 delete-btn"
                    title="Eliminar"
                    data-product-id={product.id}
                    data-product-name={product.name}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9z" clip-rule="evenodd" />
                      <path d="M7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" />
                    </svg>
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

    </div>
    
      <div class="mt-6">
        <Pagination totalPages={totalPages} currentPage={pageParam} queryParams={{}} />
      </div>
  </div>

  <!-- Incluir SweetAlert2 desde CDN para evitar problemas de módulo -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <script>
    import Swal from 'sweetalert2';
    // Verificar que SweetAlert2 esté disponible
    function ensureSwalLoaded(callback: () => void) {
      if (typeof Swal === 'function') {
        callback();
      } else {
        setTimeout(() => ensureSwalLoaded(callback), 100);
      }
    }

    document.addEventListener('astro:page-load', () => {
      ensureSwalLoaded(() => {
        const deleteButtons = document.querySelectorAll('.delete-btn');

        deleteButtons.forEach(btn => {
          // Solución: Usar una función de flecha y capturar el evento
          btn.addEventListener('click', async (event) => {
            // Obtener el botón del evento
            const button = event.currentTarget as HTMLButtonElement;
            
            const productId = button.getAttribute('data-product-id');
            const productName = button.getAttribute('data-product-name');
            if (!productId || !productName) return;

            // Confirmación con SweetAlert2
            const { isConfirmed } = await Swal.fire({
              title: '¿Eliminar producto?',
              html: `¿Estás seguro de que deseas eliminar el producto <strong>${productName}</strong>?`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#3085d6',
              confirmButtonText: 'Sí, eliminar',
              cancelButtonText: 'Cancelar',
              customClass: {
                popup: 'rounded-2xl shadow-lg p-6',
                title: 'text-xl font-bold text-red-500',
                htmlContainer: 'text-gray-500 mt-2',
                confirmButton: 'px-4 py-2 rounded-lg font-medium',
                cancelButton: 'px-4 py-2 rounded-lg font-medium'
              }
            });

            if (!isConfirmed) return;

            // Mostrar spinner
            Swal.fire({
              title: 'Eliminando...',
              html: `Por favor espera mientras eliminamos <strong>${productName}</strong>`,
              allowOutsideClick: false,
              showConfirmButton: false,
              didOpen: () => {
                Swal.showLoading();
              },
              customClass: {
                popup: 'rounded-2xl shadow-lg p-6'
              }
            });

            try {
              // Hacer petición al servidor
              const response = await fetch('/_actions/deleteProduct', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: productId })
              });

              // Manejar respuesta
              const result = await response.json();
              
              if (response.ok && result.success) {
                // Éxito: mostrar notificación y recargar
                Swal.fire({
                  icon: 'success',
                  title: '¡Eliminado!',
                  html: `El producto <strong>${productName}</strong> ha sido eliminado correctamente.`,
                  timer: 2000,
                  showConfirmButton: false,
                  customClass: {
                    popup: 'rounded-2xl shadow-lg p-6'
                  }
                }).then(() => {
                  window.location.reload();
                });
              } else {
                // Error del servidor
                throw new Error(result.error || result.message || 'Error al eliminar el producto');
              }
            } catch (error) {
              // Manejar errores
              console.error('Error al eliminar:', error);
              const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
              
              Swal.fire({
                icon: 'success',
                title: 'Producto eliminado',
                html: `<div class="text-gray-800">PRODUCTO ELIMINADO.</div>
                      <div class="text-red-500 mt-2">${errorMessage}</div>`,
                confirmButtonText: 'Entendido',
                customClass: {
                  popup: 'rounded-2xl shadow-lg p-6'
                }
              }).then(() => {
                // Rehabilitar el botón
                // button.removeAttribute('disabled');
                window.location.reload();
              });
            }
          });
        });
      });
    });
  </script>
</ProductsLayout>