---
import ProductImage from "@/components/products/ProductImage.astro";
import Pagination from "@/components/shared/Pagination.astro";
import AdminLayout from "@/layouts/AdminLayout.astro";
import ProductsLayout from "@/layouts/ProductsLayout.astro";
import { Formatter } from "@/utils";
import { actions } from "astro:actions";

const searchParams = Astro.url.searchParams;
const pageParam = Number(searchParams.get('page') ?? 1);

const { data, error } = await Astro.callAction(
  actions.getProductsByPage,
  { page: pageParam }
);

if (error) {
  return Astro.redirect('/');
}

const { products, totalPages } = data;
---
<AdminLayout title="Panel de Administración">
  <div class="max-w-7xl mx-auto px-6 py-12 space-y-8">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-4xl font-extrabold text-gray-800">Inventario de Joyas</h1>
        <p class="text-lg text-gray-500 mt-1">Controla y gestiona tus piezas con facilidad</p>
      </div>
      <a href="/admin/products/new" class="inline-flex items-center bg-gradient-to-r from-yellow-400 to-yellow-500 text-white px-5 py-3 rounded-2xl font-semibold shadow-lg hover:from-yellow-500 hover:to-yellow-600 transition">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        Agregar Joya
      </a>
    </div>

    <!-- Table Container -->
    <div class="bg-white rounded-3xl shadow-xl overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white">
          <thead class="bg-yellow-50">
            <tr>
              <th class="text-left text-sm font-medium text-yellow-700 px-6 py-4">Imagen</th>
              <th class="text-left text-sm font-medium text-yellow-700 px-6 py-4">Nombre</th>
              <th class="text-left text-sm font-medium text-yellow-700 px-6 py-4">Precio</th>
              <th class="text-left text-sm font-medium text-yellow-700 px-6 py-4">Stock</th>
              <th class="text-left text-sm font-medium text-yellow-700 px-6 py-4">Acciones</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-100">
            {products.map((product) => (
              <tr id={`product-row-${product.id}`} class="hover:bg-gray-50 transition">
                <td class="px-6 py-4">
                  {product.images && product.images.length > 0 ? (
                    <ProductImage src={product.images[0]} alt={product.name} className="h-16 w-16 object-contain rounded-xl shadow-sm" />
                  ) : (
                    <div class="flex items-center justify-center h-16 w-16 bg-gray-100 rounded-xl">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-6-6h.01" />
                      </svg>
                    </div>
                  )}
                </td>
                <td class="px-6 py-4">
                  <a href={`/admin/products/${product.slug}`} class="text-gray-800 font-medium hover:text-yellow-600 transition">
                    {product.name}
                  </a>
                </td>
                <td class="px-6 py-4 font-semibold text-gray-800">
                  {Formatter.currency(product.price)}
                </td>
                <td class="px-6 py-4">
                  <span class={product.stock > 0 ? 'inline-block px-2 py-1 text-sm font-medium rounded-full bg-green-100 text-green-700' : 'inline-block px-2 py-1 text-sm font-medium rounded-full bg-red-100 text-red-700'}>
                    {product.stock} ud
                  </span>
                </td>
                <td class="px-6 py-4 flex space-x-3">
                  <a href={`/admin/products/${product.slug}`} class="p-2 rounded-full hover:bg-yellow-100 transition">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500 hover:text-yellow-700" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793z" />
                      <path d="M11.38 5.793L3 14.172V17h2.828l8.38-8.379-2.828-2.828z" />
                    </svg>
                  </a>
                  <button 
                    type="button"
                    class="p-2 rounded-full text-red-500 hover:text-red-700 hover:bg-red-100 transition delete-btn"
                    title="Eliminar"
                    data-product-id={product.id}
                    data-product-name={product.name}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9z" clip-rule="evenodd" />
                      <path d="M7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" />
                    </svg>
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div class="px-6 py-4 bg-gray-50">
        <Pagination totalPages={totalPages} currentPage={pageParam} queryParams={{}} />
      </div>
    </div>

    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      import Swal from 'sweetalert2';
      function ensureSwalLoaded(callback: () => void) {
        if (typeof Swal === 'function') callback();
        else setTimeout(() => ensureSwalLoaded(callback), 100);
      }
      document.addEventListener('astro:page-load', () => {
        ensureSwalLoaded(() => {
          document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
              const button = e.currentTarget as HTMLButtonElement;
              const id = button.dataset.productId;
              const name = button.dataset.productName;
              if (!id || !name) return;
              const { isConfirmed } = await Swal.fire({
                title: 'Eliminar joya? ',
                html: `¿Seguro que quieres eliminar <strong>${name}</strong>?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#e53e3e',
                cancelButtonColor: '#3182ce',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar',
                customClass: {
                  popup: 'rounded-2xl shadow-xl p-8',
                  title: 'text-2xl font-bold text-red-600'
                }
              });
              if (!isConfirmed) return;
              Swal.fire({ title: 'Eliminando...', allowOutsideClick: false, didOpen: () => Swal.showLoading(), customClass: { popup: 'rounded-2xl shadow-xl p-6' } });
              try {
                const res = await fetch('/_actions/deleteProduct', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({ id }) });
                const result = await res.json();
                if (res.ok && result.success) {
                  await Swal.fire({ icon: 'success', title: '¡Eliminado!', html: `<strong>${name}</strong> eliminado.`, timer: 1500, showConfirmButton: false, customClass: { popup: 'rounded-2xl shadow-xl p-6' }});
                  window.location.reload();
                } else throw new Error(result.error || 'Error');
              } catch(err) {
                await Swal.fire({ icon: 'error', title: 'Error', confirmButtonText: 'Entendido', customClass: { popup: 'rounded-2xl shadow-xl p-6' }});
              }
            });
          });
        });
      });
    </script>
</AdminLayout>
