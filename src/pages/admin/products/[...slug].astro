---
import ProductImage from '@/components/products/ProductImage.astro';
import ProductSlideshow from '@/components/products/ProductSlideshow.astro';
import ProductsLayout from '@/layouts/ProductsLayout.astro';
import { actions } from 'astro:actions';

const { slug } = Astro.params;
const { data, error } = await Astro.callAction(actions.getProductBySlug, slug ?? '');

if (error) {
  return Astro.redirect('/404');
}

const { product: rawProduct, images } = data;

// Normalizar piercing_name para asegurar que sea un array
const product = {
  ...rawProduct,
  piercing_name: 
    Array.isArray(rawProduct.piercing_name) 
      ? rawProduct.piercing_name 
      : rawProduct.piercing_name 
        ? rawProduct.piercing_name.split(',').map(p => p.trim())
        : []
};
---

<ProductsLayout title="Mantenimiento de producto">
  <section class="max-w-6xl mx-auto p-6 bg-slate-900 rounded-2xl shadow-lg text-slate-100">
    <h1>{product.name}</h1>
    <div class="mb-6">
      <h1 class="text-3xl font-bold mb-2">Editar producto</h1>
      <a href="javascript:history.back()" class="text-yellow-400 hover:underline">← Volver</a>
    </div>

    <form class="grid grid-cols-1 md:grid-cols-2 gap-8" id="product-form">
      <input type="hidden" name="id" value={product.id}>
      <!-- DATOS GENERALES -->
      <div class="space-y-6">
        <div>
          <label for="name" class="block mb-1 text-sm font-semibold">Nombre</label>
          <input
            id="name"
            name="name"
            type="text"
            value={product.name}
            required
            class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-yellow-500"
          />
        </div>

        <div>
          <label for="slug" class="block mb-1 text-sm font-semibold">Slug</label>
          <input
            id="slug"
            name="slug"
            type="text"
            value={product.slug}
            required
            class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm"
          />
        </div>

        <div>
          <label for="description" class="block mb-1 text-sm font-semibold">Descripción</label>
          <textarea
            id="description"
            name="description"
            rows="6"
            required
            class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm"
          >{product.description}</textarea>
        </div>

        <div class="grid grid-cols-2 gap-6">
          <div>
            <label for="price" class="block mb-1 text-sm font-semibold">Precio</label>
            <input
              id="price"
              name="price"
              type="number"
              value={product.price}
              required
              class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm"
            />
          </div>
          <div>
            <label for="stock" class="block mb-1 text-sm font-semibold">Inventario</label>
            <input
              id="stock"
              name="stock"
              type="number"
              value={product.stock}
              required
              class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm"
            />
          </div>
        </div>

        <div class="grid grid-cols-2 gap-6">
          <div>
            <label for="category" class="block mb-1 text-sm font-semibold">Categoría</label>
            <select
              id="category"
              name="category"
              required
              class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm"
            >
              <option value="">[ Seleccione ]</option>
              {
                [   'Titanio',
                    'Acero Quirúrgico',
                    'Oro 10k',
                    'Oro 14k',
                    'Oro 18k',
                    'Chapa de Oro 14K',
                    'Chapa de Oro 18K',
                    'Acero Inoxidable',
                    'Plástico',
                    'Plata',
                    'Rodio'].map((c) => (
                  <option value={c} selected={c === product.category}>
                    {c}
                  </option>
                ))
              }
            </select>

          </div>

          <div>
            <label for="type" class="block mb-1 text-sm font-semibold">Tipo</label>
            <select
              id="type"
              name="type"
              required
              class="w-full p-3 bg-slate-50 text-slate-900 rounded-lg shadow-sm"
            >
              <option value="">[ Seleccione ]</option>
              {
                ['Anillos', 'Broqueles', 'Pulseras', 'Cadenas'].map((t) => (
                  <option value={t} selected={t === product.type}>
                    {t}
                  </option>
                ))
              }
            </select>
          </div>
<div class="col-span-full">
  <label class="block mb-2 text-sm font-semibold">Tipos de perforación</label>
  <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
    {['Lóbulo', 'Lóbulo Superior', 'Hélix', 'Antihelix', 'Tragus', 
      'Antitragus', 'Rook', 'Conch', 'Daith', 'Industrial', 
      'Séptum', 'Nóstril', 'Navel', 'Ninguno'].map(piercing => {
        const isChecked = product.piercing_name.includes(piercing);
        return (
          <label
            for={`piercing-${piercing}`}
            class={`flex flex-row items-center gap-2.5 ${isChecked ? 'text-yellow-400' : 'text-slate-300'} hover:text-white transition-colors cursor-pointer`}
          >
            <input 
              id={`piercing-${piercing}`}
              name="piercing_name"
              type="checkbox"
              value={piercing}
              checked={isChecked}
              class="peer hidden"
            />
            <div class={`h-5 w-5 flex items-center justify-center rounded-md border ${
              isChecked 
                ? 'bg-yellow-500 border-yellow-500' 
                : 'border-slate-600 bg-slate-800'
            } peer-checked:bg-yellow-500 peer-checked:border-yellow-500 transition`}>
              <svg
                fill="none"
                viewBox="0 0 24 24"
                class={`w-4 h-4 stroke-slate-800 ${
                  isChecked ? 'opacity-100' : 'opacity-0'
                } peer-checked:opacity-100 transition-opacity`}
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M4 12.6111L8.92308 17.5L20 6.5"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                ></path>
              </svg>
            </div>
            <span class="text-sm">{piercing}</span>
          </label>
        );
      })
    }
  </div>
</div>
        </div>
      </div>

      <!-- IMÁGENES -->
      <div class="space-y-6">
        <!-- SUBIR IMÁGENES -->
        <div>
          <label for="file-upload" class="block mb-1 text-sm font-semibold">Subir imágenes</label>
          <label
            for="file-upload"
            id="drop-zone"
            class="flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-500 rounded-lg cursor-pointer hover:bg-slate-800 transition"
          >
            <svg class="w-10 h-10 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12" />
            </svg>
            <p class="text-sm text-gray-300" id="lbl-selected-files">Click aquí o arrastra imágenes</p>
            <p class="text-xs text-gray-400">JPG, PNG, GIF - máx. 800x400px</p>
            <input id="file-upload" name="imageFiles" type="file" accept="image/*" multiple class="hidden" />
          </label>
        </div>

        <!-- SLIDESHOW -->
        <ProductSlideshow images={images.map(i => i.image)} />

        <!-- LISTA DE IMÁGENES -->
        <table class="w-full border border-gray-700 text-sm">
          <thead class="bg-slate-800 text-slate-300">
            <tr>
              <th class="py-2 px-4 text-left">Imagen</th>
              <th class="py-2 px-4 text-center">Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              images.map(({image, id}) => (
                <tr class="border-t border-slate-700" id={id}>
                  <td class="py-2 px-4">
                    <ProductImage src={image} alt={product.name} className="w-16 h-16 rounded object-cover" />
                  </td>
                  <td class="py-2 px-4 text-center">
                    <button
                         data-id={id}
                         type="button" class="btn-delete-image">✕</button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </form>

    <!-- BOTÓN GUARDAR -->
    <div class="mt-10 text-right">
      <button
        type="submit"
        form="product-form"
        class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded-lg shadow-md transition"
      >
        Guardar producto
      </button>
    </div>
  </section>

  <style>
    .btn-delete-image {
      @apply bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded transition;
    }
  </style>
</ProductsLayout>

<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const form = document.querySelector('form') as HTMLFormElement;
    const btnsDeleteImage = document.querySelectorAll('.btn-delete-image');

    if (!form) {
      return;
    }
 // Aplicar estilos iniciales a los checkboxes (CORRECCIÓN)
    document.querySelectorAll<HTMLInputElement>('input[name="piercing_name"]').forEach(checkbox => {
      const label = checkbox.closest('label');
      if (!label) return;
      
      if (checkbox.checked) {
        label.classList.add('text-yellow-400');
        label.classList.remove('text-slate-300');
      } else {
        label.classList.remove('text-yellow-400');
        label.classList.add('text-slate-300');
      }
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Validar que al menos un piercing esté seleccionado
      const piercingCheckboxes = document.querySelectorAll<HTMLInputElement>(
        'input[name="piercing_name"]:checked'
      );
      
      if (piercingCheckboxes.length === 0) {
        if (!confirm('⚠️ No has seleccionado ningún tipo de perforación.\n¿Deseas continuar de todas formas?')) {
          return;
        }
      }
    
      const formData = new FormData(form);

      const { data, error } = await actions.crateUpdateProduct(formData);

      if (error) {
        return alert(error.message);
      }

      navigate(`javascript:history.back()`);
    });

    // Eliminar imagenes
    const btnsDeleteImages = document.querySelectorAll('.btn-delete-image');

    btnsDeleteImages.forEach(btn => {
        btn.addEventListener('click', async(e) => {
            const id = btn.getAttribute('data-id') ?? '';

            if(!id) return;

            const {error} = await actions.deleteProductImage(id);

            if (error) {
                console.log(error)
                alert(error)
                return;
            }
            document.getElementById(id)?.remove();
        });
    });

    // Drag & Drop
    const lblSelectedFiles = document.querySelector('#lbl-selected-files') as HTMLParagraphElement;
    const dropZone = document.querySelector('#drop-zone') as HTMLLabelElement;
    const fileInput = document.querySelector(
      '#file-upload'
    ) as HTMLInputElement;

    const preventDefaults = (e: DragEvent) => {
        e.preventDefault()
        e.stopPropagation()
    }

    (['dragenter', 'dragover', 'dragleave', 'drop'] as const ).forEach(
        (eventName) => {
            dropZone.addEventListener(eventName, preventDefaults);
            document.body.addEventListener(eventName, preventDefaults);
        }
    );

    const highlight = (e: DragEvent) => {
        dropZone.classList.add('border-blue-500', 'bg-gray-700')
    }

    const unHighlight = (e: DragEvent) => {
        dropZone.classList.remove('border-blue-500', 'bg-gray-700')
    }

    (['dragenter', 'dragover'] as const ).forEach(
        (eventName) => {
            dropZone.addEventListener(eventName, highlight);
        }
    );

    (['dragleave', 'drop'] as const ).forEach(
        (eventName) => {
            dropZone.addEventListener(eventName, unHighlight);
        }
    );

    const createFileList = ( files:File[] ): FileList => {
        const dataTransfer = new DataTransfer();
        files.forEach( file => dataTransfer.items.add(file))
        return dataTransfer.files;
    }

    const handleFiles = (files: FileList) => {
        const validFiles = Array.from(files).filter(
            file => file.type.startsWith('image/')
        );

        if ( fileInput && validFiles.length > 0 ) {
            fileInput.files = createFileList(validFiles);
        }

        lblSelectedFiles.innerHTML = `<strong>${validFiles.length} archivos seleccionados</strong>`
    }

    // Solo imagenes
    dropZone.addEventListener('drop', e => {
        const files = e.dataTransfer?.files;
        if ( files ) {
            handleFiles(files);
        }
    })


  });
</script>