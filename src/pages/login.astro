---
import AuthLayout from "@/layouts/AuthLayout.astro";

const email = Astro.cookies.get('email')?.value ?? '';
const rememberMe = !!email;


---

<AuthLayout>
        <div class="flex justify-center self-center  z-10">
        <div class="p-12 bg-white mx-auto rounded-2xl w-100 ">
            <div class="mb-4">
              <h3 class="font-semibold text-2xl text-gray-800">Login</h3>
              <p class="text-gray-500">Please sign in to your account.</p>
            </div>
            <form class="space-y-5">
                        <div class="space-y-2">
                              <label class="text-sm font-medium text-gray-700 tracking-wide">Email</label>
              <input class=" w-full text-base px-4 py-2 border  border-gray-300 rounded-lg focus:outline-none focus:border-green-400" type="email" value={email} name="email" placeholder="mail@gmail.com">
              </div>
                          <div class="space-y-2">
              <label class="mb-5 text-sm font-medium text-gray-700 tracking-wide">
                Password
              </label>
              <input class="w-full content-center text-base px-4 py-2 border  border-gray-300 rounded-lg focus:outline-none focus:border-green-400" type="password" name="password" placeholder="Enter your password">
            </div>
              <div class="flex items-center justify-between">
              <div class="flex items-center">
                <input id="remember_me" name="remember_me" type="checkbox" checked= {rememberMe}="h-4 w-4 bg-blue-500 focus:ring-blue-400 border-gray-300 rounded">
                <label for="remember_me" class="ml-2 block text-sm text-gray-800">
                  Remember me
                </label>
              </div>
              <div class="text-sm">
                <p>Don't have an account?</p>
                <a href="/register" class="text-green-400 hover:text-green-500">
                  Create an account
                </a>
              </div>
            </div>
            <div>
            <button
              id="btn-login"
              type="submit"
              class="w-full flex justify-center items-center bg-green-400 enabled:bg-green-400 disabled:bg-gray-300 text-gray-100 p-3 rounded-full tracking-wide font-semibold shadow-lg cursor-pointer transition ease-in duration-300"
            >
              <span id="btn-text">Sign in</span>
            </button>

            <div class="flex flex-1 w-full my-2">
              <div class="w-full border-t-2 border-gray-500"></div>
            </div>
            <button
              id="btn-google"
              type="button"
              class="w-full flex justify-center items-center bg-green-400 enabled:bg-red-400 disabled:bg-gray-300 text-gray-100 p-3 rounded-full tracking-wide font-semibold shadow-lg cursor-pointer transition ease-in duration-300"
            >
              <span id="btn-text">Sign in with Google</span>
            </button>

            </div>
            </form>
            <div class="pt-5 text-center text-gray-400 text-xs">
              <span>
                Copyright © 2024-{new Date().getFullYear()}
                
            </div>
        </div>
      </div>
</AuthLayout>

<script>
import { actions } from "astro:actions";
import Swal from "sweetalert2";

const form = document.querySelector('form') as HTMLFormElement;
const btnSubmit = document.querySelector('#btn-login') as HTMLButtonElement;
const btnGoogle = document.querySelector('#btn-google') as HTMLButtonElement;
const btnText = document.querySelector('#btn-text') as HTMLSpanElement;
const { signIn } = await import("auth-astro/client")

form.addEventListener('submit', async (e) => {
  e.preventDefault();

  // Deshabilita el botón y cambia el texto
  btnSubmit.setAttribute('disabled', 'true');
  btnText.textContent = 'Loading...';

  const formData = new FormData(form);


const resp = await signIn('credentials', {
  email: formData.get('email') as string,
  password: formData.get('password') as string,
  redirect: false,
} as any);

  if (resp) {
    Swal.fire({
      icon: 'error',
      title: 'Login failed',
      text: 'User or email are not correct'
    });
    // Rehabilita el botón y vuelve al texto original
    btnSubmit.removeAttribute('disabled');
    btnText.textContent = 'Sign in';
    return;
  }

  // Redirige si todo salió bien
  window.location.replace('/');
});

// btnGoogle.addEventListener('click', async() => {
//   btnSubmit.setAttribute('disabled', 'true');
//   const provider = new GoogleAuthProvider();

//   try {
    
//     const credentials = await signInWithPopup( firebase.auth, provider);

//     const {error} = await actions.loginWithGoogle(credentials);

//     if ( error ) {
//       alert(error.message);
//       btnSubmit.removeAttribute('disabled');
//       return;
//     }

//     btnGoogle.innerText = 'Redirection...';
//     window.location.replace('/protected')


//   } catch (error) {
//     console.log(error);
//     btnSubmit.removeAttribute('disabled');
//   }



// });

</script>