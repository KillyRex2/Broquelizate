---
import MainLayout from "@/layouts/MainLayout.astro";
import { Formatter } from "@/utils";
import Stripe from 'stripe';
import { CartCookiesClient } from '@/utils/cart-cookies';

const STRIPE_SECRET_KEY = import.meta.env.STRIPE_SECRET_KEY;
const stripe = new Stripe(STRIPE_SECRET_KEY, {
  apiVersion: "2025-05-28.basil",
});

// Definir tipos para los productos
interface NormalizedProduct {
  name: string;
  price: number;
  quantity: number;
  image?: string | null;
}

// Obtener session_id de la URL
const sessionId = Astro.url.searchParams.get('session_id');

// Definir estructura para orderDetails
interface OrderDetails {
  orderId: string;
  date: string;
  products: NormalizedProduct[];
  shipping: {
    method: string;
    cost: number;
    address: string;
  };
  customer: {
    name: string;
    email: string;
  };
  subtotal: number;
  tax: number;
  total: number;
}

let orderDetails: OrderDetails | null = null;
let errorMessage: string | null = null;

// Limpiar el carrito inmediatamente
CartCookiesClient.clearCart()

if (sessionId) {
  try {
    // Recuperar la sesión de Stripe con expansión de productos
    const session = await stripe.checkout.sessions.retrieve(sessionId, {
      expand: ['line_items.data.price.product']
    });

    // Acceder a propiedades con tipo any para evitar errores de TypeScript
    const sessionAny: any = session;

    // Obtener productos desde line_items
    const productsFromItems = sessionAny.line_items?.data.map((item: any) => ({
      name: item.description || item.price.product.name,
      price: item.price.unit_amount / 100, // Convertir de centavos a pesos
      quantity: item.quantity,
      image: item.price.product?.images?.[0] || null // Tomar la primera imagen
    })) || [];

    // Intentar obtener productos desde metadata (solo si no hay en line_items)
    let orderProducts = productsFromItems;
    if (productsFromItems.length === 0) {
      const productsData = sessionAny.metadata?.p;
      if (productsData) {
        const metadataProducts = JSON.parse(productsData);
        orderProducts = metadataProducts.map((op: any) => ({
          name: op.n || "Producto",
          price: op.p || 0,
          quantity: op.q || 1,
          image: op.i || null
        }));
      }
    }

    // Calcular totales
    const subtotal = orderProducts.reduce((sum, p) => sum + p.price * p.quantity, 0);
    const tax = subtotal * 0.15;
    const shippingCost = sessionAny.shipping_cost?.amount_total ? sessionAny.shipping_cost.amount_total / 100 : 0;
    const total = subtotal + tax + shippingCost;

    // Obtener dirección de envío de forma segura
    const shippingAddress = sessionAny.shipping_details?.address;
    const shippingAddressStr = shippingAddress ? 
      `${shippingAddress.line1}, ${shippingAddress.city}` : 
      "Dirección no disponible";

    // Obtener nombre del cliente
    const customerName = sessionAny.shipping_details?.name || 
                         sessionAny.customer_details?.name || 
                         "Cliente";

    // Obtener email del cliente
    const customerEmail = sessionAny.customer_details?.email || 
                          sessionAny.metadata?.e || 
                          "Correo no disponible";

    // Construir detalles de la orden
    orderDetails = {
      orderId: sessionAny.id.substring(3, 9).toUpperCase(),
      date: new Date(sessionAny.created * 1000).toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }),
      products: orderProducts,
      shipping: {
        method: sessionAny.shipping_options?.[0]?.shipping_rate?.display_name || "Envío Estándar",
        cost: shippingCost,
        address: shippingAddressStr
      },
      customer: {
        name: customerName,
        email: customerEmail
      },
      subtotal,
      tax,
      total
    };

  } catch (error: any) {
    errorMessage = error.message;
    console.error('Error retrieving Stripe session:', error);
  }
} else {
  errorMessage = "No se encontró ID de sesión";
}
---

<MainLayout>
  <div class="min-h-screen py-12 px-16 sm:px-6 lg:px-8 mt-10">
    <div class="max-w-4xl mx-auto">
      <!-- Banner de éxito -->
      <div class="bg-green-50 rounded-lg p-6 mb-8 border border-green-200">
        <div class="flex items-start">
          <svg class="h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <div class="ml-4">
            <h1 class="text-2xl font-bold text-green-800">¡Pago Completado con Éxito!</h1>
            <p class="mt-2 text-green-700">Gracias por tu compra. Tu pedido ha sido procesado correctamente y está siendo preparado.</p>
            {orderDetails && (
              <div class="mt-4">
                <p class="font-medium text-green-800 ">ID de Pedido: <span class="font-bold">{orderDetails.orderId}</span></p>
                <p class="text-sm text-green-700">Fecha: {orderDetails.date}</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {orderDetails ? (
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Resumen del pedido -->
          <div class="lg:col-span-2">
            <div class="bg-white shadow rounded-lg overflow-hidden">
              <div class="px-6 py-5 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">Resumen del pedido</h2>
              </div>
              
              <!-- Productos -->
              <div class="divide-y divide-gray-200">
                {orderDetails.products.map((product) => (
                  <div class="py-5 px-6 flex items-center">
                    {product.image ? (
                      <img 
                        src={product.image} 
                        alt={product.name}
                        class="w-16 h-16 object-cover rounded-md"
                        loading="lazy"
                        width="64"
                        height="64"
                      />
                    ) : (
                      <div class="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16" />
                    )}
                    <div class="ml-4 flex-1">
                      <h3 class="text-lg font-medium text-gray-900">{product.name}</h3>
                      <p class="text-gray-500">Cantidad: {product.quantity}</p>
                    </div>
                    <div class="text-right">
                      <p class="text-lg font-semibold text-gray-900">
                        {Formatter.currency(product.price * product.quantity)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
              
              <!-- Totales -->
              <div class="px-6 py-5">
                <div class="flex justify-between py-2">
                  <span class="text-gray-600">Subtotal</span>
                  <span class="font-medium text-black">{Formatter.currency(orderDetails.subtotal)}</span>
                </div>
                <div class="flex justify-between py-2">
                  <span class="text-gray-600">Impuestos (15%)</span>
                  <span class="font-medium text-black">{Formatter.currency(orderDetails.tax)}</span>
                </div>
                <div class="flex justify-between py-2">
                  <span class="text-gray-600">Envío</span>
                  <span class="font-medium text-black">{Formatter.currency(orderDetails.shipping.cost)}</span>
                </div>
                <div class="flex justify-between py-4 border-t border-gray-200 mt-2">
                  <span class="text-lg font-semibold text-black">Total</span>
                  <span class="text-lg font-bold text-yellow-600">
                    {Formatter.currency(orderDetails.total)}
                  </span>
                </div>
              </div>
            </div>
            
            <!-- Información de envío -->
            <div class="mt-8 bg-white shadow rounded-lg overflow-hidden">
              <div class="px-6 py-5 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">Información de envío</h2>
              </div>
              <div class="px-6 py-5">
                <div class="flex items-start">
                  <svg class="h-6 w-6 text-gray-500 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                  </svg>
                  <div class="ml-4">
                    <h3 class="text-lg font-medium text-gray-900">{orderDetails.customer.name}</h3>
                    <p class="text-gray-600 mt-1">{orderDetails.shipping.address}</p>
                    <p class="text-gray-600 mt-1">{orderDetails.customer.email}</p>
                    <p class="mt-3 text-gray-600">
                      Método: <span class="font-medium">{orderDetails.shipping.method}</span>
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Información del cliente y acciones -->
          <div>
            <div class="bg-white shadow rounded-lg overflow-hidden">
              <div class="px-6 py-5 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">Información del cliente</h2>
              </div>
              <div class="px-6 py-5">
                <div class="flex items-start">
                  <svg class="h-6 w-6 text-gray-500 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <div class="ml-4">
                    <h3 class="text-lg font-medium text-gray-900">{orderDetails.customer.name}</h3>
                    <p class="text-gray-600 mt-1">{orderDetails.customer.email}</p>
                  </div>
                </div>
                
                <div class="mt-6">
                  <button class="w-full py-3 px-4 bg-yellow-600 text-white font-medium rounded-md hover:bg-yellow-700 transition-colors">
                    Descargar factura
                  </button>
                  <button class="w-full py-3 px-4 mt-3 bg-white text-yellow-600 font-medium rounded-md border border-yellow-600 hover:bg-purple-50 transition-colors">
                    Contactar soporte
                  </button>
                </div>
              </div>
            </div>
            
            <div class="mt-8 bg-white shadow rounded-lg overflow-hidden">
              <div class="px-6 py-5 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">¿Necesitas ayuda?</h2>
              </div>
              <div class="px-6 py-5">
                <p class="text-gray-600">
                  Si tienes alguna pregunta sobre tu pedido, no dudes en contactar a nuestro equipo de soporte.
                </p>
                <div class="mt-4">
                  <a href="mailto:broquelizatelaguna@gmail.com" class="text-yellow-600 font-medium hover:underline">
                    broquelizatelaguna@gmail.com
                  </a>
                </div>
                <div class="mt-2">
                  <a href="tel:+528714617696" class="text-yellow-600 font-medium hover:underline">
                    +52 871 461 7696
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : errorMessage ? (
        <div class="bg-red-50 rounded-lg p-6 mb-8 border border-red-200">
          <div class="flex items-start">
            <svg class="h-10 w-10 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div class="ml-4">
              <h1 class="text-2xl font-bold text-red-800">Error al cargar la orden</h1>
              <p class="mt-2 text-red-700">{errorMessage}</p>
              <a href="/" class="mt-4 inline-block px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">
                Volver a la tienda
              </a>
            </div>
          </div>
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500 mb-4"></div>
          <p class="text-lg text-gray-600">Cargando detalles de tu pedido...</p>
        </div>
      )}
    </div>
  </div>
</MainLayout>

<style>
html {
  font-family: system-ui, sans-serif;
  background-color: #1E1E1E;
  color-scheme: dark;
}

body {
  background-color: transparent;
  color: #f3f4f6;
}

.bg-green-50 {
  background-color: #f0fdf4;
}

.bg-green-200 {
  background-color: #bbf7d0;
}

.text-green-800 {
  color: #166534;
}

.text-green-700 {
  color: #15803d;
}

.bg-purple-600 {
  background-color: #7e22ce;
}

.bg-purple-700 {
  background-color: #6b21a8;
}

.text-purple-600 {
  color: #7e22ce;
}

.border-dashed {
  border-style: dashed;
}
</style>