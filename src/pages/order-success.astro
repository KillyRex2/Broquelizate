---
// src/pages/order-success.astro
import MainLayout from "@/layouts/MainLayout.astro";
import { Formatter } from "@/utils";
import Stripe from 'stripe';
import { CartCookiesClient } from '@/utils/cart-cookies';

// Configuración de Stripe
const STRIPE_SECRET_KEY = import.meta.env.STRIPE_SECRET_KEY;
const stripe = new Stripe(STRIPE_SECRET_KEY);

// Definir tipos
interface NormalizedProduct {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string | null;
}

interface OrderDetails {
  orderId: string;
  date: string;
  products: NormalizedProduct[];
  shipping: {
    method: string;
    cost: number;
    address: string;
  };
  customer: {
    name: string;
    email: string;
  };
  subtotal: number;
  tax: number;
  total: number;
  paymentStatus: string;
  paymentMethod: string;
}

let orderDetails: OrderDetails | null = null;
let errorMessage: string | null = null;

// Limpiar el carrito al llegar a esta página
CartCookiesClient.clearCart();

const sessionId = Astro.url.searchParams.get('session_id');
const orderIdParam = Astro.url.searchParams.get('order_id');

try {
  if (orderIdParam) {
    // Cargar desde la base de datos si tenemos order_id
    const response = await fetch(`${Astro.url.origin}/api/get-order?order_id=${orderIdParam}`);
    if (response.ok) {
      const orderData = await response.json();
      
      orderDetails = {
        orderId: orderData.orderNumber,
        date: new Date(orderData.createdAt).toLocaleDateString('es-MX', { year: 'numeric', month: 'long', day: 'numeric' }),
        products: orderData.items.map((item: any) => ({
          id: item.productId,
          name: item.productName,
          price: item.price,
          quantity: item.quantity,
          image: item.productImage,
        })),
        shipping: {
          method: "Recogida en tienda",
          cost: 0,
          address: JSON.parse(orderData.shippingAddress).streetAddress || "Dirección no disponible"
        },
        customer: {
          name: "Cliente",
          email: orderData.customerEmail
        },
        subtotal: orderData.subtotal,
        tax: orderData.tax,
        total: orderData.total,
        paymentStatus: "Pagado",
        paymentMethod: orderData.paymentMethod || 'Desconocido'
      };
    } else {
      throw new Error("No se pudo cargar la orden desde la base de datos");
    }
  } else if (sessionId) {
    // Recuperar la sesión de Stripe
    const session = await stripe.checkout.sessions.retrieve(sessionId, {
      expand: ['line_items.data.price.product']
    });

    const products = session.line_items?.data.map(item => {
      const product = item.price?.product as Stripe.Product;
      return {
        id: product.id || "",
        name: item.description || product.name,
        price: item.price?.unit_amount ? item.price.unit_amount / 100 : 0,
        quantity: item.quantity || 1,
        image: product.images?.[0] || null
      };
    }) || [];
    
    const total = session.amount_total ? session.amount_total / 100 : 0;
    const shippingAddress = session.customer_details?.address;
    const shippingAddressStr = shippingAddress ? 
      `${shippingAddress.line1}, ${shippingAddress.city}, ${shippingAddress.country}` : 
      "Dirección no disponible";

    orderDetails = {
      orderId: session.id.substring(0, 8).toUpperCase(),
      date: new Date(session.created * 1000).toLocaleDateString('es-MX', { year: 'numeric', month: 'long', day: 'numeric' }),
      products,
      shipping: {
        method: "Envío Estándar",
        cost: session.shipping_cost?.amount_total ? session.shipping_cost.amount_total / 100 : 0,
        address: shippingAddressStr
      },
      customer: {
        name: session.customer_details?.name || "Cliente",
        email: session.customer_details?.email || "Correo no disponible"
      },
      subtotal: total,
      tax: 0,
      total: total,
      paymentStatus: session.payment_status === "paid" ? "Pagado" : "Pendiente",
      paymentMethod: 'Tarjeta'
    };
  } else {
    errorMessage = "No se encontró ID de sesión ni ID de pedido";
  }
} catch (error: any) {
  errorMessage = error.message || "Error al cargar los detalles del pedido";
  console.error('Error detallado:', error);
}
---

<MainLayout>
  <div class="min-h-screen py-12 px-4 sm:px-6 lg:px-8 mt-10">
    <div class="max-w-4xl mx-auto" aria-live="polite">
      {errorMessage ? (
        <div class="bg-red-50 rounded-lg p-6 text-center">
          <h1 class="text-2xl font-bold text-red-800">Error al cargar la orden</h1>
          <p class="mt-2 text-red-700">{errorMessage}</p>
          <a href="/" class="mt-6 inline-block px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600">Volver a la tienda</a>
        </div>
      ) : orderDetails ? (
        <div>
          {/* Banner de éxito */}
          <div class="bg-green-50 rounded-lg p-6 mb-8 border border-green-200">
            <div class="flex flex-col md:flex-row items-start md:items-center">
              <div class="flex items-center">
                <svg class="h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <div class="ml-4">
                  <h1 class="text-2xl font-bold text-green-800">¡Pago Completado con Éxito!</h1>
                  <p class="mt-1 text-green-700">Gracias por tu compra. Tu pedido está siendo preparado.</p>
                </div>
              </div>
              <div class="md:ml-auto mt-4 md:mt-0">
                <div class="bg-white rounded-lg p-4 shadow-sm">
                  <p class="font-medium text-gray-700">ID de Pedido: <span class="font-bold text-green-800">{orderDetails.orderId}</span></p>
                  <p class="text-sm text-gray-600">Fecha: {orderDetails.date}</p>
                </div>
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 rounded-lg">
            {/* Columna Izquierda: Resumen y Envío */}
            <div class="lg:col-span-2 space-y-8">
              <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Resumen del pedido</h2>
                </div>
                <div class="divide-y divide-gray-100">
                  {orderDetails.products.map((product) => (
                    <div class="py-5 px-6 flex items-center">
                      <img src={product.image || 'https://placehold.co/100x100/e2e8f0/4a5568?text=N/A'} alt={product.name} class="w-16 h-16 object-cover rounded-md" />
                      <div class="ml-4 flex-1">
                        <h3 class="text-lg font-medium text-gray-900">{product.name}</h3>
                        <p class="text-gray-500 text-sm">Cantidad: {product.quantity}</p>
                      </div>
                      <div class="text-right">
                        <p class="text-lg font-semibold text-gray-900">{Formatter.currency(product.price * product.quantity)}</p>
                      </div>
                    </div>
                  ))}
                </div>
                <div class="px-6 py-5 bg-gray-50 rounded-lg">
                  <div class="flex justify-between py-2"><span class="text-gray-600">Subtotal</span><span class="font-medium text-black">{Formatter.currency(orderDetails.subtotal)}</span></div>
                  <div class="flex justify-between py-2"><span class="text-gray-600">Impuestos</span><span class="font-medium text-black">{Formatter.currency(orderDetails.tax)}</span></div>
                  <div class="flex justify-between py-4 border-t border-gray-200 mt-2"><span class="text-lg font-semibold text-black">Total</span><span class="text-lg font-bold text-yellow-600">{Formatter.currency(orderDetails.total)}</span></div>
                </div>
              </div>

              <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Información de envío</h2>
                </div>
                <div class="px-6 py-5">
                  <p class="font-medium text-gray-800">{orderDetails.customer.name}</p>
                  <p class="text-gray-600 mt-1">{orderDetails.shipping.address}</p>
                  <p class="text-gray-600">{orderDetails.customer.email}</p>
                </div>
              </div>
            </div>
            
            {/* Columna Derecha: Seguimiento y Ayuda */}
            <div class="space-y-8">
              <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Seguimiento</h2>
                </div>
                <div class="p-6 space-y-4">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                      <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
                    </div>
                    <p class="ml-3 font-medium text-gray-800">Pago confirmado</p>
                  </div>
                  <div class="flex items-center">
                    <div class="flex-shrink-0 w-8 h-8 rounded-full bg-yellow-500 flex items-center justify-center">
                      <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                    </div>
                    <p class="ml-3 font-medium text-gray-800">Preparando pedido</p>
                  </div>
                </div>
              </div>

              <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">¿Necesitas ayuda?</h2>
                </div>
                <div class="p-6 space-y-3">
                  <a href="mailto:broquelizatelaguna@gmail.com" class="flex items-center text-yellow-600 font-medium hover:underline">
                    <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg>
                    <span>Contactar por correo</span>
                  </a>
                  <button id="download-invoice" class="w-full mt-4 py-3 px-4 bg-gray-800 text-white font-medium rounded-md hover:bg-black transition-colors flex items-center justify-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                    Descargar Ticket
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}
    </div>
  </div>

  {orderDetails && (
    <div id="order-details-data" style="display: none;">
      {JSON.stringify(orderDetails)}
    </div>
  )}

  <script>
    import { generateAndPrintTicket } from '@/services/ticketGenerator';

    async function handlePrintTicket() {
      const btn = document.getElementById('download-invoice') as HTMLButtonElement;
      const orderDetailsDataElement = document.getElementById('order-details-data');
      if (!btn || !orderDetailsDataElement) return;

      const orderDetails = JSON.parse(orderDetailsDataElement.textContent || '{}');
      if (!orderDetails.products || !orderDetails.orderId) {
        alert('No se encontraron los detalles de la orden para generar el ticket.');
        return;
      }
      
      const originalContent = btn.innerHTML;
      btn.disabled = true;
      btn.innerHTML = 'Generando...';

      try {
        const storeInfo = {
          name: "Broquelízate La Laguna",
          address: "Bravo 222, Colonia Centro, Gómez Palacio, Dgo.",
          phone: "528714617696",
        };

        await generateAndPrintTicket(
          orderDetails.products,
          orderDetails.total,
          orderDetails.orderId,
          orderDetails.paymentMethod,
          storeInfo
        );
      } catch (err) {
        console.error('Error al generar el ticket:', err);
        alert('Hubo un error al generar el ticket.');
      } finally {
        btn.disabled = false;
        btn.innerHTML = originalContent;
      }
    }

    document.addEventListener('astro:page-load', () => {
      const button = document.getElementById('download-invoice');
      if (button) {
        button.onclick = handlePrintTicket;
      }
    });
  </script>
</MainLayout>
