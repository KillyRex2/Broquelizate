---
import MainLayout from "@/layouts/MainLayout.astro";
import { Formatter } from "@/utils";
import Stripe from 'stripe';
import { CartCookiesClient } from '@/utils/cart-cookies';

// Configuración de Stripe
const STRIPE_SECRET_KEY = import.meta.env.STRIPE_SECRET_KEY;
const stripe = new Stripe(STRIPE_SECRET_KEY, {
  apiVersion: "2025-05-28.basil", // Versión estable actual
});



// Definir tipos para los productos
interface NormalizedProduct {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string | null;
}

// Definir estructura para orderDetails
interface OrderDetails {
  orderId: string;
  date: string;
  products: NormalizedProduct[];
  shipping: {
    method: string;
    cost: number;
    address: string;
  };
  customer: {
    name: string;
    email: string;
  };
  subtotal: number;
  tax: number;
  total: number;
  paymentStatus: string;
}

let orderDetails: OrderDetails | null = null;
let errorMessage: string | null = null;
let loading = true;
// Variables para los datos esenciales del PDF
let orderIdForPdf = "";
let orderDateForPdf = "";

// Limpiar el carrito
CartCookiesClient.clearCart();

// Obtener session_id de la URL
const sessionId = Astro.url.searchParams.get('session_id');
const orderIdParam = Astro.url.searchParams.get('order_id');

// Intentar cargar los datos del pedido
try {
  if (orderIdParam) {
    // Cargar desde la base de datos si tenemos order_id
    const response = await fetch(`${Astro.url.origin}/api/get-order?order_id=${orderIdParam}`);
    if (response.ok) {
      const orderData = await response.json();
      
      orderDetails = {
        orderId: orderData.orderNumber,
        date: new Date(orderData.createdAt).toLocaleDateString('es-MX', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }),
        products: orderData.items.map((item: any) => ({
          id: item.productId,
          name: item.productName,
          price: item.price,
          quantity: item.quantity,
          image: item.productImage,
        })),
        shipping: {
          method: "Recogida en tienda",
          cost: 0,
          address: JSON.parse(orderData.shippingAddress).streetAddress || "Dirección no disponible"
        },
        customer: {
          name: "Cliente",
          email: orderData.customerEmail
        },
        subtotal: orderData.subtotal,
        tax: orderData.tax,
        total: orderData.total,
        paymentStatus: "Pagado"
      };
    } else {
      throw new Error("No se pudo cargar la orden desde la base de datos");
    }
  } else if (sessionId) {
    // Recuperar la sesión de Stripe
    const session = await stripe.checkout.sessions.retrieve(sessionId, {
      expand: ['line_items.data.price.product']
    });

    // Obtener productos desde line_items
    const products = session.line_items?.data.map(item => {
      const product = item.price?.product as Stripe.Product;
      const imageUrl = product.images?.[0] || null;
      return {
        id: product.id || "",
        name: item.description || product.name,
        price: item.price?.unit_amount ? item.price.unit_amount / 100 : 0,
        quantity: item.quantity || 1,
        image: imageUrl
      };
    }) || [];

    // Calcular totales
    const subtotal = products.reduce((sum, p) => sum + p.price * p.quantity, 0);
    const tax = session.total_details?.breakdown?.taxes?.reduce((sum, tax) => sum + (tax.amount / 100), 0) || 0;
    
    // Usar shipping_cost en lugar de breakdown.shipping
    const shippingCost = session.shipping_cost?.amount_total ? session.shipping_cost.amount_total / 100 : 0;
    
    const total = session.amount_total ? session.amount_total / 100 : 0;

    // Obtener dirección de envío
    const shippingAddress = session.customer_details?.address;
    const shippingAddressStr = shippingAddress ? 
      `${shippingAddress.line1}, ${shippingAddress.city}, ${shippingAddress.country}` : 
      "Dirección no disponible";

    // Obtener el método de envío
    let shippingMethod = "Envío Estándar";
    if ((session.shipping_cost as any)?.display_name) {
      shippingMethod = (session.shipping_cost as any).display_name;
    } 

    // Construir detalles de la orden
    orderDetails = {
      orderId: session.id.substring(0, 8).toUpperCase(),
      date: new Date(session.created * 1000).toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }),
      products,
      shipping: {
        method: shippingMethod,
        cost: shippingCost,
        address: shippingAddressStr
      },
      customer: {
        name: session.customer_details?.name || "Cliente",
        email: session.customer_details?.email || "Correo no disponible"
      },
      subtotal,
      tax,
      total,
      paymentStatus: session.payment_status === "paid" ? "Pagado" : "Pendiente"
    };
  } else {
    errorMessage = "No se encontró ID de sesión ni ID de pedido";
  }
} catch (error: any) {
  errorMessage = error.message || "Error al cargar los detalles del pedido";
  console.error('Error detallado:', {
    message: error.message,
    stack: error.stack,
    sessionId,
    orderIdParam
  });
} finally {
  loading = false;
}

// Si orderDetails existe, asignamos las variables para el PDF
if (orderDetails) {
  orderIdForPdf = orderDetails.orderId;
  orderDateForPdf = orderDetails.date;
}

// orderObject es un JS object, no un string
const orderObject = orderDetails
  ? {
      id: orderDetails.orderId,
      date: orderDetails.date,
      products: orderDetails.products,
      shipping: orderDetails.shipping,
      customer: orderDetails.customer,
      subtotal: orderDetails.subtotal,
      tax: orderDetails.tax,
      total: orderDetails.total
    }
  : null;

if (orderObject) {
  console.log("Datos de la orden para el cliente:", JSON.stringify(orderObject.products, null, 2));
}

---


<MainLayout>
  <div class="min-h-screen py-12 px-4 sm:px-6 lg:px-8 mt-10">
    <div class="max-w-4xl mx-auto" aria-live="polite">
      {!loading && !errorMessage && !orderDetails ? (
        <div class="text-center py-12">
          <div class="inline-flex items-center justify-center">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-600 mb-4"></div>
          </div>
          <p class="text-lg text-gray-600">Cargando detalles de tu pedido...</p>
        </div>
      ) : errorMessage ? (
        <div class="bg-red-50 rounded-lg p-6 mb-8 border border-red-200">
          <div class="flex items-start">
            <svg class="h-10 w-10 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div class="ml-4">
              <h1 class="text-2xl font-bold text-red-800">Error al cargar la orden</h1>
              <p class="mt-2 text-red-700">{errorMessage}</p>
              <div class="mt-6 space-y-3">
                <a href="/" class="inline-block px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors">
                  Volver a la tienda
                </a>
                <a href="/contact" class="ml-4 inline-block px-6 py-3 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">
                  Contactar soporte
                </a>
              </div>
            </div>
          </div>
        </div>
      ) : orderDetails ? (
        <div>
          <!-- Banner de éxito -->
          <div class="bg-green-50 rounded-lg p-6 mb-8 border border-green-200">
            <div class="flex flex-col md:flex-row items-start md:items-center">
              <div class="flex items-center">
                <svg class="h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div class="ml-4">
                  <h1 class="text-2xl font-bold text-green-800">¡Pago Completado con Éxito!</h1>
                  <p class="mt-1 text-green-700">Gracias por tu compra. Tu pedido está siendo preparado.</p>
                </div>
              </div>
              <div class="md:ml-auto mt-4 md:mt-0">
                <div class="bg-white rounded-lg p-4 shadow-sm">
                  <p class="font-medium text-gray-700">ID de Pedido: <span class="font-bold text-green-800">{orderDetails.orderId}</span></p>
                  <p class="text-sm text-gray-600">Fecha: {orderDetails.date}</p>
                  <p class="mt-1 text-sm font-medium text-gray-500">Estado: <span class="text-green-600">{orderDetails.paymentStatus}</span></p>
                </div>
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Resumen del pedido -->
            <div class="lg:col-span-2">
              <div class="bg-white shadow rounded-lg overflow-hidden">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Resumen del pedido</h2>
                </div>
                
                <!-- Productos -->
                <div class="divide-y divide-gray-100">
                  {orderDetails.products.map((product) => {
                     let imageUrl = ''; // Variable para almacenar la URL final

                      // Verificamos que product.image exista y no esté vacío
                    if (product.image && product.image.trim() !== '') {
                      // Si ya es una URL completa, la usamos
                      if (product.image.startsWith('http')) {
                        imageUrl = product.image;
                      } 
                      // Si es una ruta local (empieza con /), la dejamos como está
                      else if (product.image.startsWith('/')) {
                        imageUrl = product.image;
                      }
                      // Como último recurso, intentamos añadir https://
                      else {
                        imageUrl = `https://${product.image}`;
                      }
                    }
                  
                   return (
                  <div class="py-5 px-6 flex items-center" data-order-product>
                    {imageUrl ? (
                      <img
                        src={imageUrl}
                        alt={product.name}
                        class="w-16 h-16 object-cover rounded-md"
                        loading="lazy"
                      />
                    ) : (
                      <div class="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16 flex items-center justify-center">
                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                      </div>
                    )}
                    <div class="ml-4 flex-1">
                      <h3 class="text-lg font-medium text-gray-900">{product.name}</h3>
                      <p class="text-gray-500 text-sm">Cantidad: {product.quantity}</p>
                    </div>
                    <div class="text-right">
                      <p class="text-lg font-semibold text-gray-900">
                        {Formatter.currency(product.price * product.quantity)}
                      </p>
                      <p class="text-sm text-gray-500">{Formatter.currency(product.price)} c/u</p>
                    </div>
                  </div>
                );
                  })}
                </div>
                
                <!-- Totales -->
                 <div class="px-6 py-5 bg-gray-50">
                <div class="flex justify-between py-2">
                  <span class="text-gray-600">Subtotal</span>
                  <span id="order-subtotal" class="font-medium text-black" data-value={orderDetails.subtotal}>
                    {Formatter.currency(orderDetails.subtotal)}
                  </span>
                </div>
                <div class="flex justify-between py-2">
                  <span class="text-gray-600">Impuestos</span>
                  <span id="order-tax" class="font-medium text-black" data-value={orderDetails.tax}>
                    {Formatter.currency(orderDetails.tax)}
                  </span>
                </div>
                <div class="flex justify-between py-2">
                  <span class="text-gray-600">Envío</span>
                  <span id="shipping-cost" class="font-medium text-black" data-value={orderDetails.shipping.cost}>
                    {Formatter.currency(orderDetails.shipping.cost)}
                  </span>
                </div>
                <div class="flex justify-between py-4 border-t border-gray-200 mt-2">
                  <span class="text-lg font-semibold text-black">Total</span>
                  <span id="order-total" class="text-lg font-bold text-yellow-600" data-value={orderDetails.total}>
                    {Formatter.currency(orderDetails.total)}
                  </span>
                </div>
              </div>
              </div>
              
              <!-- Información de envío -->
              <div class="mt-8 bg-white shadow rounded-lg overflow-hidden">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Información de envío</h2>
                </div>
                <div class="px-6 py-5">
                  <div class="flex items-start">
                    <svg class="h-6 w-6 text-gray-500 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                    </svg>
                    <div class="ml-4">
                      <h3  id="customer-name" class="text-lg font-medium text-gray-900">{orderDetails.customer.name}</h3>
                      <p  id="shipping-address" class="text-gray-600 mt-1">{orderDetails.shipping.address}</p>
                      <p id="customer-email"  class="text-gray-600 mt-1">{orderDetails.customer.email}</p>
                      <p class="mt-3">
                        <span class="text-gray-600">Método:</span> 
                        <span id="shipping-method" class="font-medium ml-1 text-gray-500">{orderDetails.shipping.method}</span>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Información del cliente y acciones -->
            <div>
              <div class="bg-white shadow rounded-lg overflow-hidden">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Información del cliente</h2>
                </div>
                <div class="px-6 py-5">
                  <div class="flex items-start">
                    <svg class="h-6 w-6 text-gray-500 mt-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <div class="ml-4">
                      <h3 class="text-lg font-medium text-gray-900">{orderDetails.customer.name}</h3>
                      <p class="text-gray-600 mt-1">{orderDetails.customer.email}</p>
                    </div>
                  </div>
                  
                  <div class="mt-6 space-y-3">
                    <button id="download-invoice" class="w-full py-3 px-4 bg-yellow-600 text-white font-medium rounded-md hover:bg-yellow-700 transition-colors flex items-center justify-center">
                      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Descargar factura
                    </button>
                    {/* <button id="send-invoice-email"class="w-full py-3 px-4 bg-white text-yellow-600 font-medium rounded-md border border-yellow-600 hover:bg-yellow-50 transition-colors flex items-center justify-center">
                      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                      </svg>
                      Enviar por correo
                    </button> */}
                  </div>
                </div>
              </div>
              
              <div class="mt-8 bg-white shadow rounded-lg overflow-hidden">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">Seguimiento del pedido</h2>
                </div>
                <div class="px-6 py-5">
                  <div class="space-y-4">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 w-8 h-8 rounded-full bg-green-500 flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p class="font-medium text-gray-800">Pago confirmado</p>
                        <p class="text-sm text-gray-500">Tu pago ha sido procesado</p>
                      </div>
                    </div>
                    
                    <div class="flex items-center">
                      <div class="flex-shrink-0 w-8 h-8 rounded-full bg-yellow-500 flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p class="font-medium text-gray-800">Preparando pedido</p>
                        <p class="text-sm text-gray-500">Tu pedido está en proceso</p>
                      </div>
                    </div>
                    
                    <div class="flex items-center">
                      <div class="flex-shrink-0 w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p class="font-medium text-gray-800">En camino</p>
                        <p class="text-sm text-gray-500">Pronto recibirás actualizaciones</p>
                      </div>
                    </div>
                    
                    <div class="flex items-center">
                      <div class="flex-shrink-0 w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p class="font-medium text-gray-800">Entregado</p>
                        <p class="text-sm text-gray-500">Tu pedido ha sido entregado</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="mt-8 bg-white shadow rounded-lg overflow-hidden">
                <div class="px-6 py-5 border-b border-gray-200">
                  <h2 class="text-xl font-semibold text-gray-900">¿Necesitas ayuda?</h2>
                </div>
                <div class="px-6 py-5">
                  <p class="text-gray-600 mb-4">
                    Si tienes alguna pregunta sobre tu pedido, nuestro equipo de soporte está aquí para ayudarte.
                  </p>
                  <div class="space-y-3">
                    <div class="flex items-center">
                      <svg class="h-5 w-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                      </svg>
                      <a href="mailto:broquelizatelaguna@gmail.com" class="ml-2 text-yellow-600 font-medium hover:underline">
                        broquelizatelaguna@gmail.com
                      </a>
                    </div>
                    <div class="flex items-center">
                      <svg class="h-5 w-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                      </svg>
                      <a href="tel:+528714617696" class="ml-2 text-yellow-600 font-medium hover:underline">
                        +52 871 461 7696
                      </a>
                    </div>
                    <div class="flex items-center">
                      <svg class="h-5 w-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      </svg>
                      <span class="ml-2 text-gray-600">
                        Esquina con, Calle Escobedo, Bravo 222, Colonia Centro, 35000 Gómez Palacio, Dgo.
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="mt-12 text-center">
            <a href="/" class="inline-block px-8 py-3 bg-yellow-600 text-white font-medium rounded-md hover:bg-yellow-700 transition-colors">
              Continuar comprando
            </a>
            <p class="mt-4 text-gray-200 text-sm">
              ¿Necesitas ayuda con tu pedido? <a href="/contact" class="text-yellow-600 hover:underline">Contáctanos</a>
            </p>
          </div>
        </div>
      ) : (
        <div class="text-center py-12">
          <svg class="w-16 h-16 text-gray-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h2 class="text-xl font-semibold text-gray-700 mt-4">No se encontró información del pedido</h2>
          <p class="mt-2 text-gray-600">Parece que no hay detalles disponibles para mostrar.</p>
          <a href="/" class="mt-6 inline-block px-6 py-3 bg-yellow-600 text-white rounded-md hover:bg-yellow-700">
            Volver a la tienda
          </a>
        </div>
      )}
    </div>
  </div>
{orderObject && (
  <script define:vars={{ orderObject }}>
    // 'orderObject' is now a valid, ready-to-use JS object here.
    // No more JSON.parse or JSON.stringify needed!
    const ORDER_DATA = orderObject;

    const storeInfo = {
      name:    "Broquelízate La Laguna",
      address: "Esquina con, Calle Escobedo, Bravo 222, Colonia Centro, 35000 Gómez Palacio, Dgo.",
      phone:   "+52 871 461 7696",
      email:   "broquelizatelaguna@gmail.com",
      rfc:     "XAXX010101000"
    };

    async function downloadInvoiceHandler() {
      // This will now work perfectly.
      const { id: orderId, date: orderDate, products, shipping, customer, subtotal, tax, total } = ORDER_DATA;
      
      const btn = document.getElementById('download-invoice');
      if (!btn) return;
      
      const originalContent = btn.innerHTML;
      
      try {
        btn.innerHTML = `
          <div class="inline-flex items-center">
            <div class="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mr-2"></div>
            Generando factura...
          </div>`;
        btn.disabled = true;

        const pdfData = {
          products,
          tax,
          total,
          subtotal,
          shippingCost: shipping.cost,
          storeInfo,
          orderId,
          date: orderDate,
          shipping,
          customer
        };

        // Note: I'm calling the endpoint for your API route.
        // Ensure your API file is at `src/pages/api/generate-pdf.ts` (or .js)
        const res = await fetch('/api/generate-pdf', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(pdfData)
        });
        
        if (!res.ok) {
          const errorText = await res.text();
          throw new Error(`Error del servidor ${res.status}: ${errorText}`);
        }

        const blob = await res.blob();
        const url  = URL.createObjectURL(blob);
        const a    = document.createElement('a');
        
        a.href = url;
        a.download = `recibo-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        
        // Cleanup
        a.remove();
        URL.revokeObjectURL(url);

      } catch (err) {
        console.error('Error al generar PDF:', err);
        alert(`Lo sentimos, hubo un error al generar la factura. Por favor, inténtalo de nuevo.`);
      } finally {
        btn.innerHTML = originalContent;
        btn.disabled = false;
      }
    }

    // This event listener correctly re-attaches the click handler
    // on page navigations when using Astro View Transitions.
    document.addEventListener('astro:page-load', () => {
      const button = document.getElementById('download-invoice');
      if (button) {
        // To prevent adding multiple listeners, we can remove the old one first,
        // though in this simple case it's not strictly necessary.
        button.removeEventListener('click', downloadInvoiceHandler);
        button.addEventListener('click', downloadInvoiceHandler);
      }
    });

    // We also need to attach it for the initial page load.
    const initialButton = document.getElementById('download-invoice');
    if(initialButton) {
      initialButton.addEventListener('click', downloadInvoiceHandler);
    }
  </script>
)}
</MainLayout>

<style>
  body {
    background-color: #1E1E1E; ;
    color: #ffffff;
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  .bg-green-50 {
    background-color: #f0fdf4;
  }
  
  .bg-green-200 {
    background-color: #bbf7d0;
  }
  
  .text-green-800 {
    color: #166534;
  }
  
  .text-green-700 {
    color: #15803d;
  }
  
  .bg-yellow-600 {
    background-color: #ca8a04;
  }
  
  .hover\:bg-yellow-700:hover {
    background-color: #a16207;
  }
  
  .text-yellow-600 {
    color: #ca8a04;
  }
  
  .bg-red-50 {
    background-color: #fef2f2;
  }
  
  .bg-red-200 {
    background-color: #fecaca;
  }
  
  .text-red-800 {
    color: #991b1b;
  }
  
  .text-red-700 {
    color: #b91c1c;
  }
  
  .bg-gray-100 {
    background-color: #f1f5f9;
  }
  
  .border-dashed {
    border-style: dashed;
  }
  
  .shadow {
    box-shadow: 0 4px 6px -1px rgba(226, 222, 5, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
</style>