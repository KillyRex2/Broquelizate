---
import { ProductList } from "@/components";
import { FilterSidebar } from "@/components/products/FilterSidebar";
import Pagination from "@/components/shared/Pagination.astro";
import ProductsLayout from "@/layouts/ProductsLayout.astro";
import { actions } from "astro:actions";
import type { ProductWithImages } from "@/interfaces";

const searchParams = Astro.url.searchParams;

// Obtener parámetros de la URL
const pageParam = Number(searchParams.get('page') || 1);
const categoryParam = searchParams.get('category') || 'all';
const maxPriceParam = Number(searchParams.get('maxPrice')) || 5000;
const inStockParam = searchParams.get('inStock') === 'true';
const search = searchParams.get('search') || '';
const piercingParam = searchParams.get('piercing') || '';

// Llamar a la acción para obtener los productos
const result = await Astro.callAction(
  actions.getProductsByPage,  
  {
    page: pageParam,
    category: categoryParam,
    maxPrice: maxPriceParam,
    inStock: true, // Asumo que siempre quieres mostrar en stock aquí
    search: search,
    piercing: piercingParam
  }
);

// Manejo de errores
if (result.error) {
  console.error("Error al cargar productos:", result.error);
  return Astro.redirect('/error');
}
if (!result.data) {
  console.error("No se recibieron datos de productos");
  return Astro.redirect('/error');
}

const { products, totalPages } = result.data;

// Transformar productos para que coincidan con la interfaz esperada
const transformedProducts: ProductWithImages[] = products.map(product => ({
  ...product,
  images: product.images?.length ? product.images : ['no-image.png'],
  piercing_name: typeof product.piercing_name === 'string' 
    ? product.piercing_name.split(',').map(p => p.trim()) 
    : product.piercing_name || [],
  cost: product.cost || 0,
}));

// Filtrar por stock si es necesario (aunque la acción ya podría hacerlo)
const inStockProducts = transformedProducts.filter(p => p.stock > 0);

// Redirigir si la página está fuera de rango
if (transformedProducts.length === 0 && totalPages > 0 && pageParam > totalPages) {
  const queryParams = new URLSearchParams(Astro.url.search);
  queryParams.set('page', totalPages.toString());
  return Astro.redirect(`/products?${queryParams.toString()}`);
}

const filterState = {
  selectedCat: categoryParam,
  price: maxPriceParam,
  inStock: inStockParam,
  search: search,
  piercing: piercingParam
};
---

<ProductsLayout>
  <div class="relative">
    <!-- Botón para abrir filtros en vista móvil -->
    <div class="p-4 md:hidden flex justify-between items-center border-b border-gray-200 sticky top-0 bg-white z-20">
      <h2 class="text-lg font-bold text-gray-700">Productos</h2>
      <button id="open-filters-btn" class="inline-flex items-center gap-2 px-4 py-2 bg-gray-200 rounded-lg text-sm font-medium text-gray-800 hover:bg-gray-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clip-rule="evenodd" /></svg>
        <span>Filtros</span>
      </button>
    </div>

    <!-- Layout principal con Grid -->
    <div class="grid grid-cols-1 md:grid-cols-[280px_1fr] md:gap-8">
      
      <!-- Contenedor de la barra lateral para el efecto "drawer" -->
      <!-- ✅ MEJORA: Se añade 'overflow-y-auto' para permitir el scroll vertical en el menú de filtros -->
      <aside id="filters-sidebar-container" class="fixed inset-y-0 left-0 z-40 w-72 bg-gray-900  p-6 transform -translate-x-full transition-transform duration-300 ease-in-out md:relative md:translate-x-0 md:bg-transparent md:p-0 md:w-auto md:shadow-none md:border-r md:border-gray-200 overflow-y-auto">
        <!-- Botón para cerrar en móvil -->
        <button id="close-filters-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800 md:hidden">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
        </button>
        
        <FilterSidebar client:only="react" initialValues={filterState} />
      </aside>

      <!-- Overlay para el fondo en móvil -->
      <div id="filters-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden md:hidden"></div>

      <!-- Contenido Principal: Lista de Productos y Paginación -->
      <main class="p-4 md:p-0 md:py-6 flex flex-col gap-6 min-h-screen">
        <div class="flex-grow">
          {
            inStockProducts.length > 0 ? (
              <ProductList products={inStockProducts} client:only="react" />
            ) : (
              <div class="text-center py-20 bg-gray-50 rounded-lg">
                <h3 class="text-xl font-semibold text-gray-700">No se encontraron productos</h3>
                <p class="mt-2 text-gray-500">Intenta ajustar los filtros o busca otro término.</p>
                <a href="/products" class="mt-6 inline-block px-5 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700">
                  Limpiar filtros
                </a>
              </div>
            )
          }
        </div>
        
        <!-- ✅ MEJORA: La paginación se muestra siempre que haya más de una página,
             incluso después de filtrar. Si desaparece, es porque los resultados
             ahora caben en una sola página. -->
        {totalPages > 1 && (
          <div class="py-4">
            <Pagination 
              totalPages={totalPages} 
              currentPage={pageParam} 
              queryParams={{ category: categoryParam, maxPrice: maxPriceParam, inStock: inStockParam, search: search, piercing: piercingParam }}
            />
          </div>
        )}
      </main>
    </div>
  </div>

  <script>
    function setupFilterDrawer() {
      const openBtn = document.getElementById('open-filters-btn');
      const closeBtn = document.getElementById('close-filters-btn');
      const sidebar = document.getElementById('filters-sidebar-container');
      const overlay = document.getElementById('filters-overlay');

      if (!openBtn || !closeBtn || !sidebar || !overlay) return;

      const openSidebar = () => {
        sidebar.classList.remove('-translate-x-full');
        sidebar.classList.add('translate-x-0');
        overlay.classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Evita el scroll del fondo
      };

      const closeSidebar = () => {
        sidebar.classList.remove('translate-x-0');
        sidebar.classList.add('-translate-x-full');
        overlay.classList.add('hidden');
        document.body.style.overflow = ''; // Restaura el scroll
      };

      openBtn.addEventListener('click', openSidebar);
      closeBtn.addEventListener('click', closeSidebar);
      overlay.addEventListener('click', closeSidebar);
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !sidebar.classList.contains('-translate-x-full')) {
          closeSidebar();
        }
      });
    }

    document.addEventListener('astro:page-load', setupFilterDrawer);
  </script>
</ProductsLayout>
