---
import { ProductList } from "@/components";
import { FilterSidebar } from "@/components/products/FilterSidebar";
import Pagination from "@/components/shared/Pagination.astro";
import ProductsLayout from "@/layouts/ProductsLayout.astro";
import { actions } from "astro:actions";
import type { ProductWithImages } from "@/interfaces"; // Asegúrate de importar la interfaz

const searchParams = Astro.url.searchParams;

// Obtener parámetros
const pageParam = Number(searchParams.get('page') || 1);
const categoryParam = searchParams.get('category') || 'all';
const maxPriceParam = Number(searchParams.get('maxPrice')) || 5000;
const inStockParam = searchParams.get('inStock') === 'true';
const search = searchParams.get('search') || '';
const piercingParam = searchParams.get('piercing') || '';

// Llamar a la acción
const result = await Astro.callAction(
  actions.getProductsByPage,  
  {
    page: pageParam,
    category: categoryParam,
    maxPrice: maxPriceParam,
    inStock: true,
    search: search,
    piercing: piercingParam
  }
);

// Manejo de errores
if (result.error) {
  console.error("Error al cargar productos:", result.error);
  return Astro.redirect('/error');
}

if (!result.data) {
  console.error("No se recibieron datos de productos");
  return Astro.redirect('/error');
}

const { products, totalPages } = result.data;

// Transformar productos al tipo esperado
const transformedProducts: ProductWithImages[] = products.map(product => {
  // Convertir piercing_name a array
  const piercingArray = typeof product.piercing_name === 'string' 
    ? product.piercing_name.split(',') 
    : product.piercing_name || [];

  return {
    ...product,
    images: product.images || ['no-image.png'],
    piercing_name: piercingArray,
    cost: product.cost || 0 // Valor por defecto si falta
  };
});

const inStockProducts = transformedProducts.filter(p => p.stock > 0);

// Redirigir si no hay productos
if (transformedProducts.length === 0 && totalPages > 0) {
  const queryParams = new URLSearchParams({
    page: totalPages.toString(),
    category: categoryParam,
    maxPrice: maxPriceParam.toString(),
    inStock: inStockParam.toString(),
    search: search,
    piercing: piercingParam
  });
  
  return Astro.redirect(`/products?${queryParams.toString()}`);
}

const filterState = {
  selectedCat: categoryParam,
  price: maxPriceParam,
  inStock: inStockParam,
  search: search,
  piercing: piercingParam
};
---

<ProductsLayout>
  <div class="grid grid-cols-1 md:grid-cols-[250px_1fr] gap-6">
    <FilterSidebar 
      client:only="react" 
      initialValues={filterState}
    />

    <div class="flex flex-col gap-4">
      <ProductList products={inStockProducts} client:only="react" />

      <Pagination 
        totalPages={totalPages} 
        currentPage={pageParam} 
        queryParams={{
          category: categoryParam,
          maxPrice: maxPriceParam,
          inStock: inStockParam,
          search: search,
          piercing: piercingParam
        }}
      />
    </div>
  </div>
</ProductsLayout>